[
  {
    "objectID": "ioc_scrnaseq.html",
    "href": "ioc_scrnaseq.html",
    "title": "IOC on Single-cell RNAseq Analysis",
    "section": "",
    "text": "Training on single-cell RNAseq analysis is upcoming!"
  },
  {
    "objectID": "index.html#what-is-ioc",
    "href": "index.html#what-is-ioc",
    "title": "Welcome To the IOC Training!",
    "section": "What is IOC?",
    "text": "What is IOC?\nThe InforBio platform has developed an “Interactive Online Companionship” (IOC) specifically tailored to initiate researchers into bioinformatics. The IOC involved one-to-many virtual work sessions where companions are trained to analyze their own data.\nAll IOC programs are structured into a series of modules, with each module building upon the knowledge and skills acquired in the previous one. One module lasts one week, during which companions dive into online materials to ensure they understand and internalize the content. Companions then complete quizzes and exercises using both public and their own data to gauge their understanding, receiving personalized feedback on their work. To facilitate their learning, we provide access to computational resources such as Rstudio and Galaxy servers. The module wraps up with a 2.5 hours’ videoconference to recap the week’s material and address any questions. These videoconferences are recorded and made available for later viewing, ensuring continuous access to the learning resources.\nBy the end of an IOC, companions will be equipped with expertise and confidence to run their own analyses independently."
  },
  {
    "objectID": "index.html#ioc-tools",
    "href": "index.html#ioc-tools",
    "title": "Welcome To the IOC Training!",
    "section": "IOC tools",
    "text": "IOC tools\n\nZoom\nWe will use Zoom for videoconferencing.\nPlease follow the rules for usage:\n\nPlease be on time.\nTechnical setup:\n\nEnsure your internet connection is stable.\nTest your camera and microphone before the session.\n\nDuring the session:\n\nKeep your microphone muted unless you’re speaking to avoid background noise.\nUse the “Raise Hand” feature if you want to ask a question during the lecture.\nKeep your camera on if possible to create a more interactive environment.\n\nRecorded sessions are for personal review only. Do not distribute them without permission.\n\n\n\nSlack\nSlack is a dedicated workspace for communication and staying connected between sessions.\nIf you haven’t already use it, you need to create a Slack account.\nIf you have a Slack account, you can either connect to the account using this webpage, or use a desktop version on your computer. (Slack Windows desktop, Slack Mac desktop)\nAnd you will receive an invitation link to join the IOC Slack of your group.\n\nPost messages in the correct channel, e.g., “questions” for asking about course content.\nWhen asking questions, please be specific and clear with a minimal context, include screenshots or error message to help others understand the issue.\nWhen discussing a question, please reply in the thread to avoid flooding the channel.\n\n\n\nTrello\nTrello is a tool to help you stay organized and track your learning progress.\nYou will be invited to join a Trello board for this IOC. We will create one list per student, please add one card for each session to add your notes, summary, etc."
  },
  {
    "objectID": "ioc_bulk_rnaseq.html",
    "href": "ioc_bulk_rnaseq.html",
    "title": "IOC on Bulk RNAseq Analysis",
    "section": "",
    "text": "Training on bulk RNAseq analysis with Galaxy is upcoming!"
  },
  {
    "objectID": "ioc_r/week01/r_w01_work.html",
    "href": "ioc_r/week01/r_w01_work.html",
    "title": "Week 1 - Homework",
    "section": "",
    "text": "Write your code directly in a Quarto document.\nTo create a Quarto document: go to File -&gt; New File -&gt; Quarto Document, then click Create.\n\nImport the data file “visceral_fat.csv”.\n\n\nFirst, upload the file to a folder of your choice within your RStudio project\nNext, import the data into R and name the data frame visceral_fat.\n\nTip:\nUse the click-button method in RStudio to upload and import the file. Then, copy and paste the R commands generated into a code chunk in your Quarto report.\nOnce imported, you can use the visceral_fat dataset for further analysis in your report.\n\nSummarize the dataset.\n\nRun the function summary(visceral_fat) to generate a summary of the dataset. Describe what information you obtained.\n\nDraw a histogram.\n\nCreate a histogram for the diastolic blood pressure using the column visceral_fat[[\"diastolic_bp__mmhg\"]]. Describe what you observe from the plot.\n\nHandle an outlier.\n\nAfter consulting with a clinician, you discover that the 27th value of the diastolic blood pressure was incorrectly recorded.\n\nIgnore this value using visceral_fat[[\"diastolic_bp__mmhg\"]][-27]\nRedraw the histogram after excluding the outlier and describe any changes you observe.\n\n\nCompare mean and median.\n\nCalculate the mean (mean()) and the median (median()) for the diastolic blood pressure\n\nbefore ignoring the 27th value: visceral_fat[[\"diastolic_bp__mmhg\"]]\nafter ignoring the 27th value: visceral_fat[[\"diastolic_bp__mmhg\"]][-27]\n\nDescribe how the outlier affects the mean and median.\n\nClick “Render” to generate your Quarto report."
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#welcome-to-r",
    "href": "ioc_r/week01/r_w01_slides.html#welcome-to-r",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "Welcome to R!",
    "text": "Welcome to R!\n\n\nWhy R?\n\nBiologist friendly!\nFree and open-source\nSupported by a huge community\n\n\nWhat you can do with R?\n\nAnalyze your data\nVisualize your findings\nAutomate your workflow\nShare reproducible research"
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#the-r-console",
    "href": "ioc_r/week01/r_w01_slides.html#the-r-console",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "The R Console",
    "text": "The R Console\n\nType a command after the prompt “&gt;” and type “Enter” to execute it."
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#rstudio-login",
    "href": "ioc_r/week01/r_w01_slides.html#rstudio-login",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "Rstudio Login",
    "text": "Rstudio Login\nConnect to your RStudio server account."
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#rstudio-ide",
    "href": "ioc_r/week01/r_w01_slides.html#rstudio-ide",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "Rstudio IDE",
    "text": "Rstudio IDE\nIntegrated Development Environment (IDE)\n\n\n\n\n\nConsole: where R “talks back” to you.\nEnvironment/History: tracks your variables and past commands.\nFiles/Plots/Packages: managing your files, viewing graphs, or installing tools.\n\nRstudio cheat sheet (and French version)\n\n\nEverything you need in one organized window. Save your work as a script, RStudio includes many useful features which let us code easily. notebook, show results"
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#getting-started-in-r",
    "href": "ioc_r/week01/r_w01_slides.html#getting-started-in-r",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "Getting Started in R",
    "text": "Getting Started in R\n\n\n\nCreate a new file: Click File -&gt; New File -&gt; R Script or \nSave script: Cmd + S or Ctrl + S\n\n\n\nBasic commands1:\n\n# Use `#` to write a comment (line) in your script\n# Math with R:\n2 + 2    # Yes, R can do math!\nsqrt(16) # Square root.\n\n# Create a variable:\nx &lt;- 5 # Now x is 5. You can reuse it!\n\n# Inspect your environment:\n## Look at the \"Environment\" pane, do you see your x?\nls()\n\n# Load a package:\nlibrary(stats)\n\n# Get help of a function (documentation):\n?mean\n\n# Quit RStudio properly\nq()\n\nShortcut to run code: highlight it and press Ctrl + Enter (Windows) or Cmd + Enter (Mac)"
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#some-configuration",
    "href": "ioc_r/week01/r_w01_slides.html#some-configuration",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "Some Configuration",
    "text": "Some Configuration\nGo to Tools -&gt; Global Options…\n\n\nUnder the General tab:\n\nUncheck the box “Restore .RData…”\nSet “Save workspace to .RData on exit” to Never."
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#some-configuration-1",
    "href": "ioc_r/week01/r_w01_slides.html#some-configuration-1",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "Some Configuration",
    "text": "Some Configuration\nGo to Tools -&gt; Global Options…\n\n\nUnder the Code tab:\nIn the Display panel, check the box “Use rainbow parentheses”"
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#some-configuration-2",
    "href": "ioc_r/week01/r_w01_slides.html#some-configuration-2",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "Some Configuration",
    "text": "Some Configuration\nGo to Tools -&gt; Global Options…\n\n\n\nUnder the Appearance tab:\n\nYou can select a theme for you RStudio, e.g., the “Cobalt” for a dark theme.\n\nUnder the Pane Layout tab:\n\nYou can arrange the four panels as you prefer.\nIn addition, click “Add Column” lets you open an extra “Source” code column, allowing you to view your scripts side by side!"
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#create-an-r-project",
    "href": "ioc_r/week01/r_w01_slides.html#create-an-r-project",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "Create an R Project",
    "text": "Create an R Project\nAn R project keeps everything for your project in one working directory and helps R to know where to look for your files.\n\n\nIn RStudio, go to File -&gt; New Project\nChoose New Directory and click New Project\nSet a folder name (e.g., my_project) and select where to save it.\nClick Create Project\n\n\n\nYou’ll notice RStudio restarts, and now your project is set up!\n\n\nAn R Project is a way to keep everything for your work (scripts, data, outputs) in one place. Think of it like a special folder where RStudio automatically knows where to look for your files. It helps avoid problems with messy file paths."
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#understanding-file-paths",
    "href": "ioc_r/week01/r_w01_slides.html#understanding-file-paths",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "Understanding File Paths",
    "text": "Understanding File Paths\nA path tells your computer where to find files.\n\n\nAbsolute path, starts from the very top of your computer’s folder\n\nE.g.:\n\nIn real-life: France, Paris, 9 Quai St Bernard, Building B, office 725\nOn Linux/Mac: /home/test_user/my_project/data/myfile.csv\nOn Windows: C:\\Users\\test_user\\my_project\\data\\myfile.csv\n\n\n\n\n\n\nRelative path, starts from your working directory (folder)\n\nE.g.:\n\nBuilding B, office 725\ndata/myfile.csv or data\\myfile.csv (Windows)\n\n\n\n\ncomputer’s file system -&gt; a country files -&gt; offices in a building"
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#a-well-organized-folder",
    "href": "ioc_r/week01/r_w01_slides.html#a-well-organized-folder",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "A Well Organized Folder",
    "text": "A Well Organized Folder\nTree structure:\nmy_project              # Your working directory    \n├── my_project.Rproj    # The R project configuration file\n├── README.md           # A short introduction of the project\n├── data                # Raw data files\n│   └── raw_count.tsv\n├── scripts             # Your R code files\n│   └── 01-analysis.R\n│   └── 02-figures.R\n└── outputs             # Results, e.g., graphs, reports\n\nexample of bad home organisation: pillow in kitchen and microoven in the bathroom The trunk is the main folder (your R Project). Branches are subfolders for scripts, data, and output, ect. By building a clear structure, you’ll: Always know where to find things. Save time when coding in R or sharing your project with others. Avoid messy files scattered everywhere."
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#where-are-you",
    "href": "ioc_r/week01/r_w01_slides.html#where-are-you",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "Where Are You?",
    "text": "Where Are You?\nmy_project              # Your working directory\n├── my_project.Rproj    # The R project configuration file\n├── README.md           # A short introduction of the project\n├── data                # Raw data files\n│   └── raw_count.tsv\n├── scripts             # Your R code files\n│   └── 01-analysis.R\n│   └── 02-figures.R\n└── outputs            # Results, e.g., graphs, reports\n\ngetwd() # Get working directory\n[1] \"/home/test_user/my_project\"\n\nWhat are the absolute and relative paths of the script “02-figures.R”?\n\n\n\nabsolute path: /home/test_user/my_project/scripts/02-figures.R\nrelative path: scripts/02-figures.R\n\n\n\nfile.exists(\"/home/test_user/my_project/scripts/02-figures.R\")\n[1] TRUE\nfile.exists(\"scripts/02-figures.R\")\n[1] TRUE"
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#import-dataset",
    "href": "ioc_r/week01/r_w01_slides.html#import-dataset",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "Import Dataset",
    "text": "Import Dataset\n\n\n\nSupported formats:\n\ntext files (.txt, .csv, etc.)\nExcel files\ndata from other software (e.g., SAS)\n\nClick-button methods:\n\nFrom menu bar: File -&gt; Import Dataset -&gt; Select the format -&gt; Choose your file\nFrom the “Environment” pane: click “Import Dataset” -&gt; Select the format -&gt; Choose your file\nFrom the “Files” pane: Navigate to your file location -&gt; Click the file and select “Import Dataset”"
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#quarto",
    "href": "ioc_r/week01/r_w01_slides.html#quarto",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "Quarto",
    "text": "Quarto\n\nOpen-source tools for creating dynamic and shareable document.\nCombines narrative text and code (multi-language) in one script (.qmd).\nSupports multiple output formats: .html, .docx, .pptx, .pdf, etc."
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#an-example",
    "href": "ioc_r/week01/r_w01_slides.html#an-example",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "An Example",
    "text": "An Example\n\n\n\n\n\n\nMarkdown syntax cheat sheet"
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#need-some-help",
    "href": "ioc_r/week01/r_w01_slides.html#need-some-help",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "Need Some Help?",
    "text": "Need Some Help?\n\nGoogle it!\nAsk/discuss your question via Slack.\nAI (like ChatGPT) is your friend 😉, but be careful of false answers! (More details in session 6)\n\nKey points:\n\nExplain your question step-by-step.\nShare the context.\nUse keywords.\nTry to rephrase the question.\n\n\ngoogle/forum stack overFlow - what are you trying to do / what did you try? - the warning or error message / your code / your data structure - language name / function or package name / a specific problem - try and iterate"
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#pdf-of-slides",
    "href": "ioc_r/week01/r_w01_slides.html#pdf-of-slides",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "PDF of Slides",
    "text": "PDF of Slides\nTo save the slides as a PDF:\n\nOpen the presentation in a web browser\nPress “e” to enable PDF export mode\nPress Ctrl + p (Windows) or Cmd + P (Mac) to print\nSelect “save as PDF” as the printer option and save the file\n\nAfter saving, press “e” again to return to presentation mode."
  },
  {
    "objectID": "ioc_r/week01/r_w01_slides.html#todays-goals",
    "href": "ioc_r/week01/r_w01_slides.html#todays-goals",
    "title": "Kickstart with R:Your Gateway to Data Science",
    "section": "Today’s Goals",
    "text": "Today’s Goals\n\nGet familiar with the RStudio\nCreate an R project in RStudio\nUpload and import data file into RStudio\nGenerate your first Quarto report"
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#data-types",
    "href": "ioc_r/week02/r_w02_slides.html#data-types",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Data Types",
    "text": "Data Types\nExamples: 1, 2.5, A, InforBio, I love R, TRUE, FALSE, …\n How R understands and stores information?\n\nMain data types:\n\nNumeric\n\nDouble: 2.5\nInteger: 1\n\nCharacter: \"A\", \"InforBio\", \"I love R\"\nLogical: TRUE, FALSE\nFactor: for categorical data"
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#where-do-we-store-data",
    "href": "ioc_r/week02/r_w02_slides.html#where-do-we-store-data",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Where Do We Store Data?",
    "text": "Where Do We Store Data?\n\nA variable is like a box where you store data.\nEach variable has a name and content (one or multiple values).\nA variable is created at the moment you assign a value to it. Use &lt;- for assignment.\n\n\nx &lt;- 1 # put a space on each side of the assignment sign\nx # type variable name to print its value(s)\n\n[1] 1\n\nchar_name &lt;- \"InforBio\"\nchar_name\n\n[1] \"InforBio\"\n\npassed &lt;- TRUE\npassed\n\n[1] TRUE\n\n\nCheck the “Environment” pane or type ls() in the console, are variables you just created there?\n\nVariables are containers for data. A box labeled “x” containing the number 1. A box labeled “char_name” containing the platform name “InforBio”."
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#variable-naming-convention",
    "href": "ioc_r/week02/r_w02_slides.html#variable-naming-convention",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Variable Naming Convention",
    "text": "Variable Naming Convention\n\n\n\nBe descriptive and keep it short\nUse snake_case or camelCase\nAvoid special characters (such as !, #, ) and spaces\nDo not start a name with numbers\nAvoid reserved keywords in R (e.g., function, if, TRUE)\nDo not overwrite built-in functions (e.g., mean, sd)\n\n\nWhich are validated names?\nfoo\ntest\nvar\nvar2\nexam_results\na_variable_with_a_name_super_long\ncount.matrix \n\nday_1\nday_one\nday1\nfirst_day_of_the_month\nDayOne\ndayOne\nDAYONE\nDAYone\n\n\nHow to know if a variable name was already used?\n\nType help(reserved) to check reserved words in R.\nCheck in “Environment” pane.\nType the first letter of a name and press the Tab key to trigger autocompletion\n\n\n\nFollow the same rules when you naming your R project folder. If really needs a long name, use abbreviation of it with a comment line at the begin to explain what it stands for."
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#numeric",
    "href": "ioc_r/week02/r_w02_slides.html#numeric",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Numeric",
    "text": "Numeric\n\n\n\nDouble (default): used for numbers with decimal points or without.\n\n\na &lt;- 3\nclass(a)\n\n[1] \"numeric\"\n\nis.numeric(a)\n\n[1] TRUE\n\ntypeof(a)\n\n[1] \"double\"\n\n\n\n\nInteger (whole numbers): must be specified with L after the number.\n\n\nb &lt;- 3L\nclass(b)\n\n[1] \"integer\"\n\nis.numeric(b)\n\n[1] TRUE\n\ntypeof(b)\n\n[1] \"integer\""
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#character",
    "href": "ioc_r/week02/r_w02_slides.html#character",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Character",
    "text": "Character\nR stores text (strings) as character. Use quotation marks to indicate a value is character.\n\n# use simple or double quotes\nx &lt;- \"I love R\"\nx\n\n[1] \"I love R\"\n\nclass(x)\n\n[1] \"character\"\n\nis.character(x)\n\n[1] TRUE\n\n\n\n\n\"1\" + \"2\"\n\nError in \"1\" + \"2\": non-numeric argument to binary operator\n\n\n\n\n\nas.numeric(\"1\") + as.numeric(\"2\")  # convert to numeric\n\n[1] 3\n\n\n\n\n\nas.character(1) # convert to character\n\n[1] \"1\""
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#logical-1",
    "href": "ioc_r/week02/r_w02_slides.html#logical-1",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Logical (1)",
    "text": "Logical (1)\n\nOnly two possible values for logical data: TRUE or FALSE.\nCan be written as T or F, but never in other formats (e.g.: True, true)\n\n\nis.logical(TRUE)\n\n[1] TRUE\n\nis.logical(T)\n\n[1] TRUE\n\nis.logical(True)\n\nError: object 'True' not found\n\n\n\nCan be obtained from logical statements, e.g.:\n\n\n2 &gt; 1\n\n[1] TRUE"
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#logical-2",
    "href": "ioc_r/week02/r_w02_slides.html#logical-2",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Logical (2)",
    "text": "Logical (2)\n\nConvert to other types:\n\n\nas.numeric(TRUE)\n\n[1] 1\n\nas.numeric(FALSE)\n\n[1] 0\n\nTRUE + TRUE + FALSE\n\n[1] 2\n\n\n\n\nas.character(TRUE)\n\n[1] \"TRUE\"\n\nas.character(FALSE)\n\n[1] \"FALSE\"\n\n\n\n\n\nas.logical(1)\n\n[1] TRUE\n\nas.logical(-1)\n\n[1] TRUE\n\nas.logical(0)\n\n[1] FALSE"
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#factor",
    "href": "ioc_r/week02/r_w02_slides.html#factor",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Factor",
    "text": "Factor\nUse factor() when you want R treats your data as categorical data.\n\ngrades &lt;- factor(\n  x = c(\"A\", \"B\", \"A\", \"B\", \"C\", \"B\") # we'll talk about vector soon!\n)\ngrades\n\n[1] A B A B C B\nLevels: A B C\n\n\n\n\nSpecify levels:\n\n\ngrades_rev &lt;- factor(\n  x = c(\"A\", \"B\", \"A\", \"B\", \"C\", \"B\"),\n  levels = c(\"C\", \"B\", \"A\") # customised order\n)\ngrades_rev\n\n[1] A B A B C B\nLevels: C B A\n\n\n\n\n\nConvert to numeric values:\n\n\nas.numeric(grades)\n\n[1] 1 2 1 2 3 2\n\nas.numeric(grades_rev)\n\n[1] 3 2 3 2 1 2"
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#from-single-value-to-multiple-values",
    "href": "ioc_r/week02/r_w02_slides.html#from-single-value-to-multiple-values",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "From Single Value to Multiple Values",
    "text": "From Single Value to Multiple Values\nWhen we store multiple values, we need a structure.\n\ngene1 &lt;- 10\ngene2 &lt;- 12\ngene3 &lt;- 9\n\nHow to put gene1, gene2 and gene3 together?\n\n R provides 4 data structures to store multiple values:\n\n\n\n\n1 dimension\n2 dimensions (row/column)\n\n\n\n\nSame data type\nvector\nmatrix\n\n\nDifferent data types\nlist\ndata frame"
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#vector-creation-1",
    "href": "ioc_r/week02/r_w02_slides.html#vector-creation-1",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Vector Creation (1)",
    "text": "Vector Creation (1)\nUse the function c() to create a vector and use , to separate elements.\n\n\n\nc(10, 12, 9) # Numeric vector\n\n[1] 10 12  9\n\nc(gene1, gene2, gene3)\n\n[1] 10 12  9\n\ngene_expr &lt;- c(gene1, gene2, gene3)\ngene_expr\n\n[1] 10 12  9\n\nc(gene_expr, 18)\n\n[1] 10 12  9 18\n\n\n\n\nQuickly create sequences of numbers\n\n\n1:10\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n5:1\n\n[1] 5 4 3 2 1\n\nseq(from = 1, to = 10, by = 2)\n\n[1] 1 3 5 7 9\n\nrep(c(1, 2), times = 2) # repetition\n\n[1] 1 2 1 2\n\n\n\n\n\nc(\"gene1\", \"gene2\", \"gene3\") # Character vector\n\n[1] \"gene1\" \"gene2\" \"gene3\"\n\nc(TRUE, FALSE, FALSE, TRUE, TRUE) # Logical vector\n\n[1]  TRUE FALSE FALSE  TRUE  TRUE\n\n\n\n\nOther tricks\n\n\npaste0(\"gene\", 1:3)\n\n[1] \"gene1\" \"gene2\" \"gene3\"\n\nrep(c(TRUE, FALSE), each = 2)\n\n[1]  TRUE  TRUE FALSE FALSE\n\n\n\nN.B.: a single value (scalar) is treated as a vector of length 1.\n\nx &lt;- 10\nlength(x)\n\n[1] 1\n\nis.vector(x)\n\n[1] TRUE"
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#vector-creation-2",
    "href": "ioc_r/week02/r_w02_slides.html#vector-creation-2",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Vector Creation (2)",
    "text": "Vector Creation (2)\nWhen you combine different data types …\n\nc(10, TRUE)\n\n[1] 10  1\n\nc(10, \"gene1\")\n\n[1] \"10\"    \"gene1\"\n\nc(TRUE, \"gene1\")\n\n[1] \"TRUE\"  \"gene1\"\n\nc(10, \"gene1\", TRUE)\n\n[1] \"10\"    \"gene1\" \"TRUE\" \n\n\n\n R follows a hierarchy of data types for coercion:\nlogical (least inclusive) → numeric → character (most inclusive)\n\nR always picks the “most flexible” type that can represent all the values without losing information."
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#vector-indexing-1",
    "href": "ioc_r/week02/r_w02_slides.html#vector-indexing-1",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Vector Indexing (1)",
    "text": "Vector Indexing (1)\n\n\n\nUse [idx] to access element(s).\n\nNotes: The index starts from 1.\n\ngene_expr\n\n[1] 10 12  9\n\ngene_expr[1]   # 1st element\n\n[1] 10\n\ngene_expr[c(2, 3)] # elements 2 and 3\n\n[1] 12  9\n\ngene_expr[2:3] # elements 2 and 3\n\n[1] 12  9\n\ngene_expr[-1]  # remove 1st element\n\n[1] 12  9\n\n\n\n\nModify element(s).\n\n\ngene_expr[1] &lt;- 100\ngene_expr\n\n[1] 100  12   9\n\ngene_expr[2:3] &lt;- 8\ngene_expr\n\n[1] 100   8   8\n\ngene_expr[2:3] &lt;- c(0, 20)\ngene_expr\n\n[1] 100   0  20"
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#vector-indexing-2",
    "href": "ioc_r/week02/r_w02_slides.html#vector-indexing-2",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Vector Indexing (2)",
    "text": "Vector Indexing (2)\n\n\n\nUse [name] to access element(s) if the vector is named.\n\n\n# name elements of the vector\nnames(gene_expr) &lt;- c(\"gene1\", \"gene2\", \"gene3\")\ngene_expr\n\ngene1 gene2 gene3 \n  100     0    20 \n\ngene_expr[\"gene1\"] # the element named \"gene1\"\n\ngene1 \n  100 \n\ngene_expr[c(\"gene1\", \"gene2\")] # extract \"gene1\" and \"gene2\"\n\ngene1 gene2 \n  100     0 \n\n\n\n\ngene_expr[-c(\"gene1\", \"gene2\")] # error\n\nError in -c(\"gene1\", \"gene2\"): invalid argument to unary operator\n\n\n\n\n\nModify element(s).\n\n\ngene_expr[\"gene1\"] &lt;- 2\ngene_expr\n\ngene1 gene2 gene3 \n    2     0    20 \n\n\n\nYour turns:\n\nmodify the expression value of “gene1” and “gene2” to 5\nchange the expression value of “gene1” to 0 and “gene2” to 16\n\n\n\n\ngene_expr[c(\"gene1\", \"gene2\")] &lt;- 5\ngene_expr\n\ngene1 gene2 gene3 \n    5     5    20 \n\ngene_expr[c(\"gene1\", \"gene2\")] &lt;- c(0, 16)\ngene_expr\n\ngene1 gene2 gene3 \n    0    16    20"
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#vector-indexing-3",
    "href": "ioc_r/week02/r_w02_slides.html#vector-indexing-3",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Vector Indexing (3)",
    "text": "Vector Indexing (3)\n\n\n\nUse a logical vector for indexing.\n\n\nnum_vec &lt;- c(1, 2, 5, 4)\nnum_vec\n\n[1] 1 2 5 4\n\nlogical_vec &lt;- c(TRUE, TRUE, FALSE, FALSE)\nlogical_vec\n\n[1]  TRUE  TRUE FALSE FALSE\n\nnum_vec[logical_vec]\n\n[1] 1 2\n\n\n\n# create logical vect using comparison operator\nnum_vec &lt; 3\n\n[1]  TRUE  TRUE FALSE FALSE\n\n# then use it to extract values from the numeric vector\nnum_vec[num_vec &lt; 3]\n\n[1] 1 2\n\n\n\nYour turns:\nR use the == to test equality. Use this operator to extract the value 5 from the num_vec.\n\n\nnum_vec[num_vec == 5]\n\n[1] 5"
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#vector-operations",
    "href": "ioc_r/week02/r_w02_slides.html#vector-operations",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Vector Operations",
    "text": "Vector Operations\n\n\n\n# create a vector for gene expression\ngene_expr &lt;- sample(x = 1:20, size = 10) # generate 10 random numbers between 1 and 20\ngene_expr\n\n [1] 15 19 14  3 10  2  6 11  5  4\n\n# check the structure\nclass(gene_expr)\n\n[1] \"integer\"\n\nstr(gene_expr)\n\n int [1:10] 15 19 14 3 10 2 6 11 5 4\n\n# vector length\nlength(gene_expr)\n\n[1] 10\n\n# show the first/last elements\nhead(gene_expr)\n\n[1] 15 19 14  3 10  2\n\ntail(gene_expr)\n\n[1] 10  2  6 11  5  4\n\n\n\n\n# Arithmetic operations\ngene_expr + 1\n\n [1] 16 20 15  4 11  3  7 12  6  5\n\ngene_expr - 1\n\n [1] 14 18 13  2  9  1  5 10  4  3\n\ngene_expr * 10\n\n [1] 150 190 140  30 100  20  60 110  50  40\n\ngene_expr / 10\n\n [1] 1.5 1.9 1.4 0.3 1.0 0.2 0.6 1.1 0.5 0.4\n\n\n\n\n# Get some summary stats\nsum(gene_expr)\n\n[1] 89\n\nmean(gene_expr)\n\n[1] 8.9\n\nmedian(gene_expr)\n\n[1] 8\n\nsummary(gene_expr)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   2.00    4.25    8.00    8.90   13.25   19.00"
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#matrices-creation",
    "href": "ioc_r/week02/r_w02_slides.html#matrices-creation",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Matrices Creation",
    "text": "Matrices Creation\n\n\n\nUse the matrix() function to create a matrix.\n\n\nmy_mat1 &lt;- matrix(1:6, nrow = 2)\nmy_mat2 &lt;- matrix(1:6, nrow = 2, byrow = TRUE)\n\nmy_mat1\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\nmy_mat2\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n\n\n\n\nCombine vectors to create matrix.\n\n\nvec1 &lt;- 1:3\nvec2 &lt;- 4:6\n\nrbind(vec1, vec2)\n\n     [,1] [,2] [,3]\nvec1    1    2    3\nvec2    4    5    6\n\ncbind(vec1, vec2)\n\n     vec1 vec2\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\n\n\nWhat is the data structure of each row/column of a matrix?"
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#matrices-indexing-1",
    "href": "ioc_r/week02/r_w02_slides.html#matrices-indexing-1",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Matrices Indexing (1)",
    "text": "Matrices Indexing (1)\n\nUse [row_idx,column_idx] to access element(s).\n\n\n\n\nmat &lt;- matrix(1:12, ncol = 4)\nmat\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12\n\ndim(mat) # dimensions of the matrix\n\n[1] 3 4\n\nncol(mat)\n\n[1] 4\n\nnrow(mat)\n\n[1] 3\n\nmat[1, 2] # element in the 1st row and 2nd column\n\n[1] 4\n\nmat[, 3] # all rows of the 3rd column\n\n[1] 7 8 9\n\n\n\n\nYour turns:\n\nhow to get all columns of the 2nd and the 3rd rows?\nhow to get the value 5 from the matrix?\n\n\n\n\nmat[2:3, ]\n\n     [,1] [,2] [,3] [,4]\n[1,]    2    5    8   11\n[2,]    3    6    9   12\n\nmat[2, 2]\n\n[1] 5\n\n\n\n\n\nAs matrix is vectors extended into 2D, if question about drop dim, drop = FALSE"
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#matrices-indexing-2",
    "href": "ioc_r/week02/r_w02_slides.html#matrices-indexing-2",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Matrices Indexing (2)",
    "text": "Matrices Indexing (2)\n\nUse [row_name,column_name] to access element(s) if names exist.\n\n\n\n\nmat\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12\n\n# add names to the columns and rows\nrownames(mat) &lt;- c(\"r1\", \"r2\", \"r3\")\ncolnames(mat) &lt;- paste0(\"c\", 1:4)\n\nmat\n\n   c1 c2 c3 c4\nr1  1  4  7 10\nr2  2  5  8 11\nr3  3  6  9 12\n\nmat[\"r1\", ] # all element of the 1st row\n\nc1 c2 c3 c4 \n 1  4  7 10 \n\n\n\n\nYour turns: by using the names of rows and columns,\n\nhow to get 2nd row of the 2nd and the 3rd columns?\nhow to get the value 5 from the matrix?\n\n\n\n\nmat[\"r2\", c(\"c2\", \"c3\")]\n\nc2 c3 \n 5  8 \n\nmat[\"r2\", \"c2\"]\n\n[1] 5"
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#matrices-indexing-3",
    "href": "ioc_r/week02/r_w02_slides.html#matrices-indexing-3",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Matrices Indexing (3)",
    "text": "Matrices Indexing (3)\n\n\n\nUse logical vector(s) for indexing.\n\n\nmat[c(TRUE, TRUE, FALSE), ]\n\n   c1 c2 c3 c4\nr1  1  4  7 10\nr2  2  5  8 11\n\nmat[c(TRUE, TRUE, FALSE), c(FALSE, TRUE, TRUE, FALSE)]\n\n   c2 c3\nr1  4  7\nr2  5  8\n\n\n\nYour turns:\nBy using the logical indexing, select the 2nd and 3rd rows, the 1st and 2nd columns of the mat.\n\n\nmat[c(FALSE, TRUE, TRUE), c(TRUE, TRUE, FALSE, FALSE)]\n\n   c1 c2\nr2  2  5\nr3  3  6"
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#matrices-operations",
    "href": "ioc_r/week02/r_w02_slides.html#matrices-operations",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Matrices Operations",
    "text": "Matrices Operations\n\n\n\nCheck the structure\n\n\nclass(mat)\n\n[1] \"matrix\" \"array\" \n\nstr(mat)\n\n int [1:3, 1:4] 1 2 3 4 5 6 7 8 9 10 ...\n - attr(*, \"dimnames\")=List of 2\n  ..$ : chr [1:3] \"r1\" \"r2\" \"r3\"\n  ..$ : chr [1:4] \"c1\" \"c2\" \"c3\" \"c4\"\n\n\n\n\nSome maths\n\n\nrowSums(mat)\n\nr1 r2 r3 \n22 26 30 \n\ncolSums(mat)\n\nc1 c2 c3 c4 \n 6 15 24 33 \n\ncolMeans(mat)\n\nc1 c2 c3 c4 \n 2  5  8 11 \n\nrowMeans(mat)\n\n r1  r2  r3 \n5.5 6.5 7.5 \n\n\n\n\n\nModify elements\n\n\nmat[1:2, 3] &lt;- c(1, 2)\nmat\n\n   c1 c2 c3 c4\nr1  1  4  1 10\nr2  2  5  2 11\nr3  3  6  9 12\n\n\n\n\nmat[1:2, ] &lt;- 10\nmat\n\n   c1 c2 c3 c4\nr1 10 10 10 10\nr2 10 10 10 10\nr3  3  6  9 12\n\n\n\n\n\n# replace values in 1st row\nmat[1, ] &lt;- c(0, 1, 2)\n\nError in mat[1, ] &lt;- c(0, 1, 2): number of items to replace is not a multiple of replacement length"
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#value-replacement",
    "href": "ioc_r/week02/r_w02_slides.html#value-replacement",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Value Replacement",
    "text": "Value Replacement\n\n\n\nIn matrices\n\n\nmat\n\n   c1 c2 c3 c4\nr1 10 10 10 10\nr2 10 10 10 10\nr3  3  6  9 12\n\n# replace values in 1st row\nmat[1, ] &lt;- c(0, 1, 2)\n\nError in mat[1, ] &lt;- c(0, 1, 2): number of items to replace is not a multiple of replacement length\n\n\n\n\nIn vectors\n\n\nnum_vec &lt;- 1:10\nnum_vec\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nnum_vec[1:5] &lt;- c(0, 1, 2)\n\nWarning in num_vec[1:5] &lt;- c(0, 1, 2): number of items to replace is not a\nmultiple of replacement length\n\nnum_vec\n\n [1]  0  1  2  0  1  6  7  8  9 10\n\n\n\n\nWhen assigning new values, you must provide either:\n\nA single value,\nA vector with the exact number of elements to be replaced, or\nA vector whose length is a factor of the number of elements to be replaced. (Recycling) Not recommanded!"
  },
  {
    "objectID": "ioc_r/week02/r_w02_slides.html#todays-goals",
    "href": "ioc_r/week02/r_w02_slides.html#todays-goals",
    "title": "Data Foundations:Vectors and Matrices",
    "section": "Today’s Goals",
    "text": "Today’s Goals\n\nGet familiar with data types\nGet familiar with vectors and matrices manipulations\nSimulate your own biological data and test the normality using the Shapiro-Wilk test"
  },
  {
    "objectID": "ioc_r/week03/r_w03_work.html",
    "href": "ioc_r/week03/r_w03_work.html",
    "title": "Week 3 - Homework",
    "section": "",
    "text": "Write your code directly in a Quarto document.\nTo create a Quarto document: go to File -&gt; New File -&gt; Quarto Document, then click Create.\nClick “Render” to generate your Quarto report."
  },
  {
    "objectID": "ioc_r/week03/r_w03_exos.html",
    "href": "ioc_r/week03/r_w03_exos.html",
    "title": "Week 3 - Hands-On Examples",
    "section": "",
    "text": "Work with lists and data frames\nCalculate fold change of gene expression between groups\nCompare gene expression using the Wilcoxon test\nVisualize differences with boxplots"
  },
  {
    "objectID": "ioc_r/week03/r_w03_exos.html#goals",
    "href": "ioc_r/week03/r_w03_exos.html#goals",
    "title": "Week 3 - Hands-On Examples",
    "section": "",
    "text": "Work with lists and data frames\nCalculate fold change of gene expression between groups\nCompare gene expression using the Wilcoxon test\nVisualize differences with boxplots"
  },
  {
    "objectID": "ioc_r/week03/r_w03_exos.html#lists",
    "href": "ioc_r/week03/r_w03_exos.html#lists",
    "title": "Week 3 - Hands-On Examples",
    "section": "Lists",
    "text": "Lists\nHere’s a toy list storing information about three samples:\n\nmy_list &lt;- list(\n  # sample information\n  sample_info = data.frame(\n    id = paste0(\"sample\", 1:3),\n    age = c(25, 27, 30),\n    sex = c(\"F\", \"M\", \"F\")\n  ),\n  ## expression matrix\n  count_expr = matrix(\n    1:6, ncol = 2, dimnames = list(\n      paste0(\"sample\", 1:3),\n      paste0(\"gene\", c(\"A\", \"B\"))\n    )\n  ),\n  # mesured genes\n  gene_name = paste0(\"gene\", c(\"A\", \"B\")),\n  # sequenced family members of each sample\n  family_sequenced = list(\n    sample1 = c(\"father\", \"mother\"),\n    sample2 = c(\"father\", \"mother\", \"sister\"),\n    sample3 = c(\"mother\", \"sister\")\n  )\n)\nmy_list\n\n$sample_info\n       id age sex\n1 sample1  25   F\n2 sample2  27   M\n3 sample3  30   F\n\n$count_expr\n        geneA geneB\nsample1     1     4\nsample2     2     5\nsample3     3     6\n\n$gene_name\n[1] \"geneA\" \"geneB\"\n\n$family_sequenced\n$family_sequenced$sample1\n[1] \"father\" \"mother\"\n\n$family_sequenced$sample2\n[1] \"father\" \"mother\" \"sister\"\n\n$family_sequenced$sample3\n[1] \"mother\" \"sister\"\n\n\n\nUse names() to extract the names of the elements in the list.\n\n\nnames(my_list)\n\n[1] \"sample_info\"      \"count_expr\"       \"gene_name\"        \"family_sequenced\"\n\n\n\nExtract the count_expr matrix from the list.\n\n\nmy_list[[\"count_expr\"]]\n\n        geneA geneB\nsample1     1     4\nsample2     2     5\nsample3     3     6\n\n\n\nFrom the matrix, find the expression value of geneA in sample2\n\n\nmy_list[[\"count_expr\"]][\"sample2\", \"geneA\"]\n\n[1] 2\n\n\n\nCalculate the total counts of each gene across all samples.\n\n\ncolSums(my_list[[\"count_expr\"]])\n\ngeneA geneB \n    6    15 \n\n\n\nFrom sample_info data frame, extract the age column.\n\n\nmy_list[[\"sample_info\"]][[\"age\"]]\n\n[1] 25 27 30\n\n\n\nExtract the 1st sequenced family member of sample3.\n\n\nmy_list[[\"family_sequenced\"]][[\"sample3\"]][1]\n\n[1] \"mother\"\n\n\n\nAdd a new element to the list, “gene_description”, with the following values: c(\"geneA\" = \"housekeeping gene\", \"geneB\" = \"stress response gene\")\n\n\nmy_list[[\"gene_description\"]] &lt;- c(\n  \"geneA\" = \"housekeeping gene\",\n  \"geneB\" = \"stress response gene\"\n)"
  },
  {
    "objectID": "ioc_r/week03/r_w03_exos.html#data-frames",
    "href": "ioc_r/week03/r_w03_exos.html#data-frames",
    "title": "Week 3 - Hands-On Examples",
    "section": "Data Frames",
    "text": "Data Frames\nUse the following code to import the file “read-counts.csv” (you have already downloaded it for the hand-on examples of week01). Name the imported data expr_data.\n\nexpr_data &lt;- read.table(\n  file = \"read-counts.csv\",  # replace the path with your own\n  header = TRUE, sep = \",\", row.names = 1\n)\n\n\nCheck the structure of expr_data using an appropriate R function.\n\n\nstr(expr_data)\n\n'data.frame':   45 obs. of  40 variables:\n $ WT.1        : num  20648 7867 1481 743 185 ...\n $ WT.2        : num  466 147 37 27 6 16 0 105 8 490 ...\n $ WT.3        : num  1783 427 187 370 200 ...\n $ WT.4        : num  25335 5178 1856 4050 669 ...\n $ WT.5        : num  64252 27889 3952 877 166 ...\n $ WT.6        : num  24126 8547 1020 357 68 ...\n $ WT.7        : num  9067 3432 484 845 360 ...\n $ WT.8        : num  19721 6935 1409 2110 595 ...\n $ WT.9        : num  67353 34229 4636 1872 438 ...\n $ WT.10       : num  28059 13913 1870 684 204 ...\n $ SET1.1      : num  21214 9807 1604 1075 209 ...\n $ SET1.2      : num  3822 1663 572 1170 381 ...\n $ SET1.3      : num  2870 932 358 1692 588 ...\n $ SET1.4      : num  65483 31023 7322 10529 1067 ...\n $ SET1.5      : num  39073 30668 3479 753 125 ...\n $ SET1.6      : num  17421 9701 1241 344 93 ...\n $ SET1.7      : num  5979 2484 518 1424 490 ...\n $ SET1.8      : num  29570 12998 3122 5552 1251 ...\n $ SET1.9      : num  56156 39462 5084 1600 346 ...\n $ SET1.10     : num  42195 26192 3027 1120 286 ...\n $ SET1.RRP6.1 : num  36236 34296 4480 3040 1155 ...\n $ SET1.RRP6.2 : num  1716 1238 677 1190 494 ...\n $ SET1.RRP6.3 : num  2137 1672 774 2940 1335 ...\n $ SET1.RRP6.4 : num  21731 18206 4335 9383 2193 ...\n $ SET1.RRP6.5 : num  43086 53296 6548 4044 906 ...\n $ SET1.RRP6.6 : num  33990 35468 3723 1710 402 ...\n $ SET1.RRP6.7 : num  12290 12523 1475 593 183 ...\n $ SET1.RRP6.8 : num  7170 7099 1101 1093 468 ...\n $ SET1.RRP6.9 : num  21650 19932 3824 5620 1940 ...\n $ SET1.RRP6.10: num  21870 23810 3677 2878 893 ...\n $ RRP6.1      : num  38560 32163 3988 2671 959 ...\n $ RRP6.2      : num  4275 1811 941 872 593 ...\n $ RRP6.3      : num  2923 1257 541 2966 1210 ...\n $ RRP6.4      : num  29292 24615 5292 7584 1664 ...\n $ RRP6.5      : num  55453 57599 6436 2714 594 ...\n $ RRP6.6      : num  37863 29579 2844 854 275 ...\n $ RRP6.7      : num  25900 17696 1931 995 517 ...\n $ RRP6.8      : num  21179 14404 2383 5318 1796 ...\n $ RRP6.9      : num  43327 40664 6029 4940 1386 ...\n $ RRP6.10     : num  77043 79181 9389 4092 1267 ...\n\n\n\nHow many unique expression values are in sample WT.2? Use unique().\n\n\nlength(unique(expr_data[[\"WT.2\"]]))\n\n[1] 33\n\n\n\nExtract expression levels for the gene LOH1 in WT samples and SET1 samples. Store them as expr_wt and expr_set1. Ensure they are vectors using unlist(). (see help with ?unlist)\n\n\nexpr_wt &lt;- expr_data[\"LOH1\", paste0(\"WT.\", 1:10)]\nexpr_set1 &lt;- expr_data[\"LOH1\", paste0(\"SET1.\", 1:10)]\n\n# check data structure\nstr(expr_wt)\n\n'data.frame':   1 obs. of  10 variables:\n $ WT.1 : num 10\n $ WT.2 : num 2\n $ WT.3 : num 14\n $ WT.4 : num 19\n $ WT.5 : num 35\n $ WT.6 : num 17\n $ WT.7 : num 6\n $ WT.8 : num 3\n $ WT.9 : num 31\n $ WT.10: num 13\n\nstr(expr_set1)\n\n'data.frame':   1 obs. of  10 variables:\n $ SET1.1 : num 67\n $ SET1.2 : num 49\n $ SET1.3 : num 83\n $ SET1.4 : num 185\n $ SET1.5 : num 203\n $ SET1.6 : num 83\n $ SET1.7 : num 40\n $ SET1.8 : num 84\n $ SET1.9 : num 134\n $ SET1.10: num 155\n\n# convert to vectors\nexpr_wt &lt;- unlist(expr_wt)\nexpr_set1 &lt;- unlist(expr_set1)\n\n# check again the structure\nstr(expr_wt)\n\n Named num [1:10] 10 2 14 19 35 17 6 3 31 13\n - attr(*, \"names\")= chr [1:10] \"WT.1\" \"WT.2\" \"WT.3\" \"WT.4\" ...\n\nstr(expr_set1)\n\n Named num [1:10] 67 49 83 185 203 83 40 84 134 155\n - attr(*, \"names\")= chr [1:10] \"SET1.1\" \"SET1.2\" \"SET1.3\" \"SET1.4\" ...\n\n\n\n\n\n\n\n\nStats Time!\n\n\n\nFold change\nFold change (FC) measures how gene expression differs between two groups (e.g., treated vs. untreated, healthy vs. diseased). \\[\nFC = \\frac{Mean Expression in Group 2}{Mean Expression in Group 1}\n\\]\nIt’s common to log2 transform the fold change :\n\\[\n\\begin{aligned}\n  \\text{FC} &= 1, \\quad \\log_2(\\text{FC}) = 0 \\Rightarrow \\text{No change}\\\\\n  \\text{FC} &= 2, \\quad \\log_2(\\text{FC}) = 1 \\Rightarrow \\text{Up-regulated} \\\\\n  \\text{FC} &= 0.5, \\quad \\log_2(\\text{FC}) = -1 \\Rightarrow \\text{Down-regulated}\n\\end{aligned}\n\\]\n\n\n\nCalculate the fold change for LOH1 between WT and SET1 groups. Is the gene up- or down-regulated?\n\n\n## Calculate the mean for each group\navg_wt &lt;- mean(expr_wt)\navg_set1 &lt;- mean(expr_set1)\n\n## Get the fold change\nfc &lt;- avg_set1 / avg_wt\n\n## log2 transformed fold change\nlfc &lt;- log2(fc)\nlfc\n\n[1] 2.851999\n\n\n\n\n\n\n\n\nStats Time!\n\n\n\nWilcoxon Rank Sum Test\nThe Wilcoxon Rank Sum test, also called Mann-Whitney test, is a non-parametric test used to compare two groups. It does not assume a normal distribution.\n\n(Figure credit: Lorette Noiret)\nThe hypotheses are:\n\nH0: two groups have the same distribution (i.e., same median)\nH1: two groups have different distributions\n\n\n\n\nUse wilcox.test() to compare LOH1 expression between WT and SET1. At \\(\\alpha = 0.05\\), what is your conclusion?\n\n\nwilcox.test(expr_wt, expr_set1)\n\nWarning in wilcox.test.default(expr_wt, expr_set1): cannot compute exact\np-value with ties\n\n\n\n    Wilcoxon rank sum test with continuity correction\n\ndata:  expr_wt and expr_set1\nW = 0, p-value = 0.0001817\nalternative hypothesis: true location shift is not equal to 0\n\n\nAs the p-value is smaller than 0.05, we can reject the H0. There is a significant difference between two WT and SET1 samples for the expression of the LOH1.\n\nCreate a new data frame for LOH1 gene expression in WT and SET1 samples with two columns:\n\n\n“expr_value”: expression levels\n“group”: WT or SET1\n\n\nexpr_loh1 &lt;- data.frame(\n  expr_value = c(expr_wt, expr_set1),\n  group = rep(c(\"WT\", \"SET1\"), each = length(expr_wt))\n)\nexpr_loh1\n\n        expr_value group\nWT.1            10    WT\nWT.2             2    WT\nWT.3            14    WT\nWT.4            19    WT\nWT.5            35    WT\nWT.6            17    WT\nWT.7             6    WT\nWT.8             3    WT\nWT.9            31    WT\nWT.10           13    WT\nSET1.1          67  SET1\nSET1.2          49  SET1\nSET1.3          83  SET1\nSET1.4         185  SET1\nSET1.5         203  SET1\nSET1.6          83  SET1\nSET1.7          40  SET1\nSET1.8          84  SET1\nSET1.9         134  SET1\nSET1.10        155  SET1\n\n\n\nWith the new data frame, draw a boxplot to compare expression between groups using boxplot(). (see ?boxplot)\n\n\nboxplot(expr_value ~ group, data = expr_loh1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBonus!\n\n\n\nCheck out this cheat sheet for the basic R commands: Base R Cheat Sheet\n\n\n\n\nGood job! 👏👏 You’ve taken your first big steps into R, and you’re off to a great start, keep it up!"
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#what-weve-learned-so-far",
    "href": "ioc_r/week03/r_w03_slides.html#what-weve-learned-so-far",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "What We’ve Learned So Far",
    "text": "What We’ve Learned So Far\n\nData types\nVariable\nData structures:\n\nvector\nmatrix"
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#data-structures",
    "href": "ioc_r/week03/r_w03_slides.html#data-structures",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "Data Structures",
    "text": "Data Structures\nThe 4 data structures to store multiple values:\n\n\n\n\n\n1 dimension\n2 dimensions (row/column)\n\n\n\n\nSame data type\nvector\nmatrix\n\n\nDifferent data types\nlist\ndata frame"
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#data-frames-creation",
    "href": "ioc_r/week03/r_w03_slides.html#data-frames-creation",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "Data Frames Creation",
    "text": "Data Frames Creation\nUse data.frame() to create a data frame.\n\n\n\nmy_df &lt;- data.frame(\n  id = 1:10,\n  gene_name = paste0(\"gene\", LETTERS[1:10]),\n  detected = \"yes\",\n  gene_expr = c(\n    12.4, 11.3, 13.5, 10.2, 11.4,\n    0.5, 1, 1.2, 1.4, 0.6\n  ),\n  status = rep(\n    c(\"activated\", \"inhibited\"),\n    each = 5\n  )\n)\nmy_df\n\n   id gene_name detected gene_expr    status\n1   1     geneA      yes      12.4 activated\n2   2     geneB      yes      11.3 activated\n3   3     geneC      yes      13.5 activated\n4   4     geneD      yes      10.2 activated\n5   5     geneE      yes      11.4 activated\n6   6     geneF      yes       0.5 inhibited\n7   7     geneG      yes       1.0 inhibited\n8   8     geneH      yes       1.2 inhibited\n9   9     geneI      yes       1.4 inhibited\n10 10     geneJ      yes       0.6 inhibited\n\n\n\n\n# Check the data structure\nclass(my_df)\n\n[1] \"data.frame\"\n\nis.data.frame(my_df)\n\n[1] TRUE\n\nstr(my_df)\n\n'data.frame':   10 obs. of  5 variables:\n $ id       : int  1 2 3 4 5 6 7 8 9 10\n $ gene_name: chr  \"geneA\" \"geneB\" \"geneC\" \"geneD\" ...\n $ detected : chr  \"yes\" \"yes\" \"yes\" \"yes\" ...\n $ gene_expr: num  12.4 11.3 13.5 10.2 11.4 0.5 1 1.2 1.4 0.6\n $ status   : chr  \"activated\" \"activated\" \"activated\" \"activated\" ...\n\n\n\nWhat are the dimensions?\nWhat is the data type for each column?"
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#exploring-the-data-frame",
    "href": "ioc_r/week03/r_w03_slides.html#exploring-the-data-frame",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "Exploring the Data Frame",
    "text": "Exploring the Data Frame\n\n\n\nnrow(my_df)\n\n[1] 10\n\nncol(my_df)\n\n[1] 5\n\ndim(my_df)\n\n[1] 10  5\n\nrownames(my_df)\n\n [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\"\n\ncolnames(my_df)\n\n[1] \"id\"        \"gene_name\" \"detected\"  \"gene_expr\" \"status\"   \n\n\n\n\nhead(my_df, n = 5)\n\n  id gene_name detected gene_expr    status\n1  1     geneA      yes      12.4 activated\n2  2     geneB      yes      11.3 activated\n3  3     geneC      yes      13.5 activated\n4  4     geneD      yes      10.2 activated\n5  5     geneE      yes      11.4 activated\n\ntail(my_df, n = 3)\n\n   id gene_name detected gene_expr    status\n8   8     geneH      yes       1.2 inhibited\n9   9     geneI      yes       1.4 inhibited\n10 10     geneJ      yes       0.6 inhibited\n\n\n\n\n\nsummary(my_df)\n\n       id         gene_name           detected           gene_expr    \n Min.   : 1.00   Length:10          Length:10          Min.   : 0.50  \n 1st Qu.: 3.25   Class :character   Class :character   1st Qu.: 1.05  \n Median : 5.50   Mode  :character   Mode  :character   Median : 5.80  \n Mean   : 5.50                                         Mean   : 6.35  \n 3rd Qu.: 7.75                                         3rd Qu.:11.38  \n Max.   :10.00                                         Max.   :13.50  \n    status         \n Length:10         \n Class :character  \n Mode  :character"
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#accessing-elements-1",
    "href": "ioc_r/week03/r_w03_slides.html#accessing-elements-1",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "Accessing Elements (1)",
    "text": "Accessing Elements (1)\nSimilar to matrix indexing, use [idx ,idx] syntax to access elements with:\n\n\nnumeric index\nrow/column names\nlogical index\n\n\n\n# Get 2nd and 3rd rows\nmy_df[2:3, ] \n\n  id gene_name detected gene_expr    status\n2  2     geneB      yes      11.3 activated\n3  3     geneC      yes      13.5 activated\n\nmy_df[-c(1, 4:10), ] # remove the other rows\n\n  id gene_name detected gene_expr    status\n2  2     geneB      yes      11.3 activated\n3  3     geneC      yes      13.5 activated\n\n\n\nmy_df[c(\"2\", \"3\"), ]\n\n  id gene_name detected gene_expr    status\n2  2     geneB      yes      11.3 activated\n3  3     geneC      yes      13.5 activated\n\nmy_df[c(FALSE, TRUE, TRUE, rep(FALSE, 7)), ]\n\n  id gene_name detected gene_expr    status\n2  2     geneB      yes      11.3 activated\n3  3     geneC      yes      13.5 activated"
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#accessing-elements-2",
    "href": "ioc_r/week03/r_w03_slides.html#accessing-elements-2",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "Accessing Elements (2)",
    "text": "Accessing Elements (2)\nHow to get the 2nd and 3rd columns?\n\n\nmy_df[, 2:3]\n\n   gene_name detected\n1      geneA      yes\n2      geneB      yes\n3      geneC      yes\n4      geneD      yes\n5      geneE      yes\n6      geneF      yes\n7      geneG      yes\n8      geneH      yes\n9      geneI      yes\n10     geneJ      yes\n\n\n\nmy_df[, c(\"gene_name\", \"detected\")] # idem\nmy_df[, c(FALSE, TRUE, TRUE, FALSE)] # idem\n\n\n\nHow to get the value “geneH”?\n\n\n\nmy_df[8, 2]\n\n[1] \"geneH\"\n\nmy_df[8, \"gene_name\"]\n\n[1] \"geneH\""
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#accessing-elements-3",
    "href": "ioc_r/week03/r_w03_slides.html#accessing-elements-3",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "Accessing Elements (3)",
    "text": "Accessing Elements (3)\n\nUse the operator $ or [[ ]] to get a column:\n\n\nmy_df$gene_name\n\n [1] \"geneA\" \"geneB\" \"geneC\" \"geneD\" \"geneE\" \"geneF\" \"geneG\" \"geneH\" \"geneI\"\n[10] \"geneJ\"\n\n\n\nmy_df[[2]] # idem, use numeric position\nmy_df[[\"gene_name\"]] # idem, use column name\n\n\nSubset the data frame based on some conditions:\n\n\n# Only keep the activated genes' data\nmy_df[my_df$status == \"activated\", ]\n\n  id gene_name detected gene_expr    status\n1  1     geneA      yes      12.4 activated\n2  2     geneB      yes      11.3 activated\n3  3     geneC      yes      13.5 activated\n4  4     geneD      yes      10.2 activated\n5  5     geneE      yes      11.4 activated\n\n\n\n(Don’t worry, we’ll go into more detail at the next session!)"
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#data-frame-modification-1",
    "href": "ioc_r/week03/r_w03_slides.html#data-frame-modification-1",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "Data Frame Modification (1)",
    "text": "Data Frame Modification (1)\nModify existing column:\n\n\n\nThe whole column\n\n\nmy_df[[\"id\"]] &lt;- paste0(\"ID\", my_df[[\"id\"]])\nmy_df\n\n     id gene_name detected gene_expr    status\n1   ID1     geneA      yes      12.4 activated\n2   ID2     geneB      yes      11.3 activated\n3   ID3     geneC      yes      13.5 activated\n4   ID4     geneD      yes      10.2 activated\n5   ID5     geneE      yes      11.4 activated\n6   ID6     geneF      yes       0.5 inhibited\n7   ID7     geneG      yes       1.0 inhibited\n8   ID8     geneH      yes       1.2 inhibited\n9   ID9     geneI      yes       1.4 inhibited\n10 ID10     geneJ      yes       0.6 inhibited\n\n\n\nmy_df$id &lt;- paste0(\"ID\", 1:10) # idem\n\n\n\nModify some elements\n\n\nmy_df[[\"id\"]][1:2] &lt;- 1:2 \nmy_df\n\n     id gene_name detected gene_expr    status\n1     1     geneA      yes      12.4 activated\n2     2     geneB      yes      11.3 activated\n3   ID3     geneC      yes      13.5 activated\n4   ID4     geneD      yes      10.2 activated\n5   ID5     geneE      yes      11.4 activated\n6   ID6     geneF      yes       0.5 inhibited\n7   ID7     geneG      yes       1.0 inhibited\n8   ID8     geneH      yes       1.2 inhibited\n9   ID9     geneI      yes       1.4 inhibited\n10 ID10     geneJ      yes       0.6 inhibited\n\n\n\nmy_df[1:2, \"id\"] &lt;- 1:2 # idem"
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#data-frame-modification-2",
    "href": "ioc_r/week03/r_w03_slides.html#data-frame-modification-2",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "Data Frame Modification (2)",
    "text": "Data Frame Modification (2)\n\nAdd new column\n\n\nmy_df[[\"tissue\"]] &lt;- rep(c(\"liver\", \"muscle\"), times = 5)\nmy_df\n\n     id gene_name detected gene_expr    status tissue\n1     1     geneA      yes      12.4 activated  liver\n2     2     geneB      yes      11.3 activated muscle\n3   ID3     geneC      yes      13.5 activated  liver\n4   ID4     geneD      yes      10.2 activated muscle\n5   ID5     geneE      yes      11.4 activated  liver\n6   ID6     geneF      yes       0.5 inhibited muscle\n7   ID7     geneG      yes       1.0 inhibited  liver\n8   ID8     geneH      yes       1.2 inhibited muscle\n9   ID9     geneI      yes       1.4 inhibited  liver\n10 ID10     geneJ      yes       0.6 inhibited muscle\n\n\n\nmy_df$tissue &lt;- rep(c(\"liver\", \"muscle\"), times = 5) # idem"
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#data-frame-modification-3",
    "href": "ioc_r/week03/r_w03_slides.html#data-frame-modification-3",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "Data Frame Modification (3)",
    "text": "Data Frame Modification (3)\n\nDelete column(s)\n\n\nmy_df[[\"detected\"]] &lt;- NULL\nmy_df\n\n     id gene_name gene_expr    status tissue\n1     1     geneA      12.4 activated  liver\n2     2     geneB      11.3 activated muscle\n3   ID3     geneC      13.5 activated  liver\n4   ID4     geneD      10.2 activated muscle\n5   ID5     geneE      11.4 activated  liver\n6   ID6     geneF       0.5 inhibited muscle\n7   ID7     geneG       1.0 inhibited  liver\n8   ID8     geneH       1.2 inhibited muscle\n9   ID9     geneI       1.4 inhibited  liver\n10 ID10     geneJ       0.6 inhibited muscle\n\n\n\nmy_df$detected &lt;- NULL # idem"
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#recoding-data-type",
    "href": "ioc_r/week03/r_w03_slides.html#recoding-data-type",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "Recoding Data Type",
    "text": "Recoding Data Type\nR (&gt;= 4.0.0) treats strings in data frames as strings rather than factors.\nYou need to recode the column data type if data is categorical.\n\nmy_df[[\"status\"]] &lt;- factor(my_df[[\"status\"]])\nmy_df$tissue &lt;- factor(my_df[[\"tissue\"]])\n\n# Check again the data\nstr(my_df)\n\n'data.frame':   10 obs. of  5 variables:\n $ id       : chr  \"1\" \"2\" \"ID3\" \"ID4\" ...\n $ gene_name: chr  \"geneA\" \"geneB\" \"geneC\" \"geneD\" ...\n $ gene_expr: num  12.4 11.3 13.5 10.2 11.4 0.5 1 1.2 1.4 0.6\n $ status   : Factor w/ 2 levels \"activated\",\"inhibited\": 1 1 1 1 1 2 2 2 2 2\n $ tissue   : Factor w/ 2 levels \"liver\",\"muscle\": 1 2 1 2 1 2 1 2 1 2\n\nsummary(my_df)\n\n      id             gene_name           gene_expr           status     tissue \n Length:10          Length:10          Min.   : 0.50   activated:5   liver :5  \n Class :character   Class :character   1st Qu.: 1.05   inhibited:5   muscle:5  \n Mode  :character   Mode  :character   Median : 5.80                           \n                                       Mean   : 6.35                           \n                                       3rd Qu.:11.38                           \n                                       Max.   :13.50"
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#lists-creation",
    "href": "ioc_r/week03/r_w03_slides.html#lists-creation",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "Lists Creation",
    "text": "Lists Creation\n\n\nUse list() function to create a list.\n\nx &lt;- \"geneA\"\ny &lt;- c(10, 11, 0.5)\nz &lt;- c(TRUE, TRUE, FALSE)\nsimple_list &lt;- list(x, y, z)\nsimple_list\n\n[[1]]\n[1] \"geneA\"\n\n[[2]]\n[1] 10.0 11.0  0.5\n\n[[3]]\n[1]  TRUE  TRUE FALSE\n\n# how many elements in the elements\nlength(simple_list)\n\n[1] 3\n\n# check the structure\nstr(simple_list)\n\nList of 3\n $ : chr \"geneA\"\n $ : num [1:3] 10 11 0.5\n $ : logi [1:3] TRUE TRUE FALSE\n\n\n\nWe can name the elements of a list:\n\n# name the elements during creation\nlist(gene_name = x, counts = y, expressed = z) \n\n$gene_name\n[1] \"geneA\"\n\n$counts\n[1] 10.0 11.0  0.5\n\n$expressed\n[1]  TRUE  TRUE FALSE\n\n# or name the elements afterward\nnames(simple_list) &lt;- c(\"gene_name\", \"counts\", \"expressed\")\nsimple_list\n\n$gene_name\n[1] \"geneA\"\n\n$counts\n[1] 10.0 11.0  0.5\n\n$expressed\n[1]  TRUE  TRUE FALSE"
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#accessing-elements-1-1",
    "href": "ioc_r/week03/r_w03_slides.html#accessing-elements-1-1",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "Accessing Elements (1)",
    "text": "Accessing Elements (1)\n\n\n\nUse $ to access named elements:\n\n\nsimple_list\n\n$gene_name\n[1] \"geneA\"\n\n$counts\n[1] 10.0 11.0  0.5\n\n$expressed\n[1]  TRUE  TRUE FALSE\n\nsimple_list$counts\n\n[1] 10.0 11.0  0.5\n\n\n\nUse [[ ]] for named or indexed elements:\n\n\nsimple_list[[\"counts\"]]\n\n[1] 10.0 11.0  0.5\n\nsimple_list[[2]]\n\n[1] 10.0 11.0  0.5\n\n\n\n\nUse [ ] to subset a list, using name or index.\n\n\nsimple_list[1]\n\n$gene_name\n[1] \"geneA\"\n\n# simple_list[\"gene_name\"] # Alternative\n\nsimple_list[c(1, 3)]\n\n$gene_name\n[1] \"geneA\"\n\n$expressed\n[1]  TRUE  TRUE FALSE\n\n# simple_list[c(\"gene_name\", \"expressed\")] # Alternative"
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#accessing-elements-2-1",
    "href": "ioc_r/week03/r_w03_slides.html#accessing-elements-2-1",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "Accessing Elements (2)",
    "text": "Accessing Elements (2)\nOnce we have access to the element, we can extract values according to the data structure used inside.\n\n\n\nmy_list &lt;- list(\n  sample_info = data.frame(\n    id = paste0(\"sample\", 1:3),\n    age = c(25, 27, 30)\n  ),\n  family_sequenced = list(\n    sample1 = c(\"father\", \"mother\"),\n    sample2 = c(\"father\", \"mother\", \"sister\"),\n    sample3 = c(\"mother\", \"sister\")\n  )\n)\nmy_list\n\n$sample_info\n       id age\n1 sample1  25\n2 sample2  27\n3 sample3  30\n\n$family_sequenced\n$family_sequenced$sample1\n[1] \"father\" \"mother\"\n\n$family_sequenced$sample2\n[1] \"father\" \"mother\" \"sister\"\n\n$family_sequenced$sample3\n[1] \"mother\" \"sister\"\n\n\n\nHow to extract the age of sample1?\n\n\nmy_list[[\"sample_info\"]][1, \"age\"]\n\n[1] 25\n\n\n\n\n How to extract the sequenced family members of sample 2?\n\n\n\nmy_list[[\"family_sequenced\"]][[\"sample2\"]]\n\n[1] \"father\" \"mother\" \"sister\""
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#list-modification",
    "href": "ioc_r/week03/r_w03_slides.html#list-modification",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "List Modification",
    "text": "List Modification\n\n\n\nsimple_list\n\n$gene_name\n[1] \"geneA\"\n\n$counts\n[1] 10.0 11.0  0.5\n\n$expressed\n[1]  TRUE  TRUE FALSE\n\n\n\nModify an element\n\n\nsimple_list[[1]] &lt;- 1:10\nsimple_list\n\n$gene_name\n [1]  1  2  3  4  5  6  7  8  9 10\n\n$counts\n[1] 10.0 11.0  0.5\n\n$expressed\n[1]  TRUE  TRUE FALSE\n\n\n\n\nAdd an element\n\n\nsimple_list[[\"new_element\"]] &lt;- 3:1\nsimple_list\n\n$gene_name\n [1]  1  2  3  4  5  6  7  8  9 10\n\n$counts\n[1] 10.0 11.0  0.5\n\n$expressed\n[1]  TRUE  TRUE FALSE\n\n$new_element\n[1] 3 2 1\n\n\n\nRemove an element\n\n\nsimple_list[[\"expressed\"]] &lt;- NULL\nsimple_list\n\n$gene_name\n [1]  1  2  3  4  5  6  7  8  9 10\n\n$counts\n[1] 10.0 11.0  0.5\n\n$new_element\n[1] 3 2 1"
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#list-concatenation",
    "href": "ioc_r/week03/r_w03_slides.html#list-concatenation",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "List Concatenation",
    "text": "List Concatenation\nUse c() to concatenate two or more lists.\n\nlist1 &lt;- list(1:3, 4:6)\nlist2 &lt;- list(letters[1:3], \"A\")\n\nlist_long &lt;- c(list1, list2)\nlist_long\n\n[[1]]\n[1] 1 2 3\n\n[[2]]\n[1] 4 5 6\n\n[[3]]\n[1] \"a\" \"b\" \"c\"\n\n[[4]]\n[1] \"A\"\n\nstr(list_long)\n\nList of 4\n $ : int [1:3] 1 2 3\n $ : int [1:3] 4 5 6\n $ : chr [1:3] \"a\" \"b\" \"c\"\n $ : chr \"A\""
  },
  {
    "objectID": "ioc_r/week03/r_w03_slides.html#todays-goals",
    "href": "ioc_r/week03/r_w03_slides.html#todays-goals",
    "title": "More Complex Data Structures:Data Frames and Lists",
    "section": "Today’s Goals",
    "text": "Today’s Goals\n\nWork with lists and data frames\nCalculate fold change of gene expression between groups\nCompare gene expression using the Wilcoxon test\nVisualize differences with boxplots"
  },
  {
    "objectID": "ioc_r/week02/r_w02_work.html",
    "href": "ioc_r/week02/r_w02_work.html",
    "title": "Week 2 - Homework",
    "section": "",
    "text": "Write your code directly in a Quarto document.\nTo create a Quarto document: go to File -&gt; New File -&gt; Quarto Document, then click Create.\nUse the following code to import the file “read-counts.csv” (you have already downloaded it for the hand-on examples of week01). Name the imported data expr_data.\n\nexpr_data &lt;- read.table(\n  file = \"read-counts.csv\",  # replace the path with your own\n  header = TRUE, sep = \",\", row.names = 1\n)\n\n\nIs the imported data a matrix?\n\n\nTransform it to a matrix using as.matrix().\n\n\nWhat are the dimensions of the matrix?\n\n\nWhat are the column names and row names?\n\n\nExtract all genes’ expression for the 10 WT samples (WT.1, WT.2, …, WT.10), and store it in a variable called expr_wt. Show the first few rows using head() function.\n\n\nWhat is the average expression level across all WT samples for each gene? Store the results in a variable called avg_wt.\n\n\nDraw a histogram to check the distribution of the average gene expression level for WT samples.\n\n\nRepeat questions 5 to 7 for the SET1 samples (SET1.1, SET1.2, …, SET1.10).\n\n\nWhat is the absolute difference between the average expression of WT and SET1 samples for each gene? Which gene shows the biggest difference?\n\nHints:\n\nUse abs() to get the absolute value. (?abs)\nThe max() function helps to find the maximum value from a vector. (?max)\nThe which.max() function helps to find the index of the maximum value from a vector. (?which.max)\n\n\nClick “Render” to generate your Quarto report."
  },
  {
    "objectID": "ioc_r/week02/r_w02_exos.html",
    "href": "ioc_r/week02/r_w02_exos.html",
    "title": "Week 2 - Hands-On Examples",
    "section": "",
    "text": "Get familiar with data types\nGet familiar with vectors and matrices manipulations\nSimulate your own biological data and test the normality using the Shapiro-Wilk test"
  },
  {
    "objectID": "ioc_r/week02/r_w02_exos.html#goals",
    "href": "ioc_r/week02/r_w02_exos.html#goals",
    "title": "Week 2 - Hands-On Examples",
    "section": "",
    "text": "Get familiar with data types\nGet familiar with vectors and matrices manipulations\nSimulate your own biological data and test the normality using the Shapiro-Wilk test"
  },
  {
    "objectID": "ioc_r/week02/r_w02_exos.html#data-types-in-r",
    "href": "ioc_r/week02/r_w02_exos.html#data-types-in-r",
    "title": "Week 2 - Hands-On Examples",
    "section": "Data Types in R",
    "text": "Data Types in R\nCreate variables to store the following types of biological data and check their class in R:\n\nThe name of a gene (e.g., BRCA1).\nThe number of samples in an experiment (e.g., 50).\nWhether a sample is treated or not (TRUE/FALSE).\nThe four bases in DNA sequence: A, T, G, C.\n\n\ngene_name &lt;- \"BRCA1\" \nclass(gene_name)\n\n[1] \"character\"\n\nnum_samples &lt;- 50    \nclass(num_samples)\n\n[1] \"numeric\"\n\nis_treated &lt;- TRUE  \nclass(is_treated)\n\n[1] \"logical\"\n\ndna_bases &lt;- c(\"A\", \"T\", \"G\", \"C\") \nclass(dna_bases)\n\n[1] \"character\""
  },
  {
    "objectID": "ioc_r/week02/r_w02_exos.html#vectors",
    "href": "ioc_r/week02/r_w02_exos.html#vectors",
    "title": "Week 2 - Hands-On Examples",
    "section": "Vectors",
    "text": "Vectors\nYou have the following concentrations of a drug measured in five samples (in µM): 2.3, 5.1, 3.8, 6.4, 4.9. Perform the following tasks:\n\nCreate a numeric vector to store the concentrations.\n\n\ndrug_concentration &lt;- c(2.3, 5.1, 3.8, 6.4, 4.9)\n\n\nCalculate the mean and standard deviation of the concentrations.\n\n\nmean_concentration &lt;- mean(drug_concentration)\nmean_concentration\n\n[1] 4.5\n\nsd_concentration &lt;- sd(drug_concentration)\nsd_concentration\n\n[1] 1.537856\n\n\n\nSubset the concentrations greater than 4 µM\n\n\nhigh_concentration &lt;- drug_concentration[drug_concentration &gt; 4]\nhigh_concentration\n\n[1] 5.1 6.4 4.9"
  },
  {
    "objectID": "ioc_r/week02/r_w02_exos.html#matrices",
    "href": "ioc_r/week02/r_w02_exos.html#matrices",
    "title": "Week 2 - Hands-On Examples",
    "section": "Matrices",
    "text": "Matrices\nYou’re working with expression levels of three genes (geneA, geneB, geneC) across five samples. The expression levels are as follows:\nsample1: 10, 12, 15  \nsample2: 20, 18, 22  \nsample3: 14, 16, 19  \nsample4: 8, 9, 7  \nsample5: 25, 30, 28  \n\nCreate a matrix to represent this data, with genes in rows and samples in columns.\n\n\n# Create the matrix\nexpression_levels &lt;- matrix(\n  c(10, 12, 15,\n    20, 18, 22,\n    14, 16, 19,\n    8, 9, 7,\n    25, 30, 28), \n  nrow = 3\n)\nexpression_levels\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]   10   20   14    8   25\n[2,]   12   18   16    9   30\n[3,]   15   22   19    7   28\n\n## or create first samples' vector then combine them\nsample1 &lt;- c(10, 12, 15)\nsample2 &lt;- c(20, 18, 22)\nsample3 &lt;- c(14, 16, 19)\nsample4 &lt;- c(8, 9, 7)\nsample5 &lt;- c(25, 30, 28)\nexpression_levels2 &lt;- cbind(sample1, sample2, sample3, sample4, sample5)\nexpression_levels2\n\n     sample1 sample2 sample3 sample4 sample5\n[1,]      10      20      14       8      25\n[2,]      12      18      16       9      30\n[3,]      15      22      19       7      28\n\n\n\nAdd row and column names to the matrix.\n\n\n# Add row and column names\nrownames(expression_levels) &lt;- c(\"geneA\", \"geneB\", \"geneC\")\ncolnames(expression_levels) &lt;- c(\"sample1\", \"sample2\", \"sample3\", \"sample4\", \"sample5\")\n\n## or\nrownames(expression_levels) &lt;- paste0(\"gene\", LETTERS[1:3])\ncolnames(expression_levels) &lt;- paste0(\"sample\", 1:5)\n\nexpression_levels\n\n      sample1 sample2 sample3 sample4 sample5\ngeneA      10      20      14       8      25\ngeneB      12      18      16       9      30\ngeneC      15      22      19       7      28\n\n\n\nCalculate the mean expression for each gene (row-wise).\n\n\ngene_means &lt;- rowMeans(expression_levels)\ngene_means\n\ngeneA geneB geneC \n 15.4  17.0  18.2 \n\n\n\nSubset the data to show only samples where geneC expression is greater than 20.\n\n\n# Extract geneC\ngeneC_expression &lt;- expression_levels[\"geneC\", ]\n\n# Subset samples with geneC &gt; 20\nhigh_geneC_samples &lt;- geneC_expression[geneC_expression &gt; 20]\nhigh_geneC_samples\n\nsample2 sample5 \n     22      28"
  },
  {
    "objectID": "ioc_r/week02/r_w02_exos.html#test-the-normality-on-simulated-data",
    "href": "ioc_r/week02/r_w02_exos.html#test-the-normality-on-simulated-data",
    "title": "Week 2 - Hands-On Examples",
    "section": "Test the Normality on Simulated Data",
    "text": "Test the Normality on Simulated Data\n\nHeight\nUse following code to generate the height (in cm) of 100 students:\n\nset.seed(1)\nheights &lt;- round(rnorm(n = 100, mean = 170, sd = 10), 1)\nheights\n\n  [1] 163.7 171.8 161.6 186.0 173.3 161.8 174.9 177.4 175.8 166.9 185.1 173.9\n [13] 163.8 147.9 181.2 169.6 169.8 179.4 178.2 175.9 179.2 177.8 170.7 150.1\n [25] 176.2 169.4 168.4 155.3 165.2 174.2 183.6 169.0 173.9 169.5 156.2 165.9\n [37] 166.1 169.4 181.0 177.6 168.4 167.5 177.0 175.6 163.1 162.9 173.6 177.7\n [49] 168.9 178.8 174.0 163.9 173.4 158.7 184.3 189.8 166.3 159.6 175.7 168.6\n [61] 194.0 169.6 176.9 170.3 162.6 171.9 152.0 184.7 171.5 191.7 174.8 162.9\n [73] 176.1 160.7 157.5 172.9 165.6 170.0 170.7 164.1 164.3 168.6 181.8 154.8\n [85] 175.9 173.3 180.6 167.0 173.7 172.7 164.6 182.1 181.6 177.0 185.9 175.6\n [97] 157.2 164.3 157.8 165.3\n\n\n\n\n\n\n\n\nStats Time!\n\n\n\nNormal Distribution\nA normal distribution (or Gaussian distribution), also called a “bell curve,” is a way that data often naturally organizes itself when we measure something repeatedly in a population.\n  (figure obtained from this source)\nIt’s symmetric, with most values clustering around the average (mean, \\(\\mu\\)), and fewer values as you move farther away from it.\nMany statistical tests (like t-tests or ANOVAs) assume that the data is normally distributed because this allows us to calculate probabilities and make inferences. If the data isn’t normal, these tests might give misleading results.\nShapiro-Wilk Test\nThe Shapiro-Wilk test is designed to check for deviations from normality, i.e., to check whether your data follows a normal distribution.\n\n\nThe function shapiro.test() in R allows to perform the test of normality.\n\nshapiro.test(heights) \n\n\n    Shapiro-Wilk normality test\n\ndata:  heights\nW = 0.99564, p-value = 0.9883\n\n\n\n\n\n\n\n\nStats Time!\n\n\n\nTest Hypotheses: H0, H1\nWhen performing a statistical test, you start with two opposing ideas, called hypotheses, that you want to evaluate:\n\nNull Hypothesis (H0): This is the default assumption, often stating that there is no effect, no difference, or no relationship in your data.\nAlternative Hypothesis (H1): This is the claim you are testing for something different from the null hypothesis.\n\nWhen you perform a statistical test, the goal is to decide whether you have enough evidence to reject the null hypothesis (H0) in favor of the alternative hypothesis (H1).\nType I error (\\(\\alpha\\))\nA type I error occurs when we reject the null hypothesis whereas it is actually true (false positive).\nThe probability (risk) of making a type I error is denoted as \\(\\alpha\\), which also called the significance level. By choosing \\(\\alpha = 0.05\\), you’re saying: “I’m willing to accept a 5% chance of incorrectly rejecting H0.”\nP-value\nThe p-value is the probability of observing your data (or something more extreme) if the null hypothesis (H0) is true.\n\nIf the p-value is small (e.g., ≤ 0.05):\n\nThere’s strong evidence against H0, so you reject it.\nThis suggests that the alternative hypothesis (H1) might be true.\n\nIf the p-value is large (e.g., &gt; 0.05):\n\nThere’s not enough evidence to reject H0.\nThis doesn’t mean H0 is true, it just means the data doesn’t strongly contradict it.\n\n\n\n\nHere, the H0 is the heights are normally distributed, and H1 is the heights are not normally distributed.\nIf we take \\(\\alpha=0.05\\): since the p-value (0.9876) is greater than 0.05, we fail to reject H0. This means there’s no strong evidence to suggest the heights are not normally distributed.\nLet’s check the heights’ distribution with a histgram!\n\n# Histogram\nhist(\n  heights, probability = TRUE, col = \"lightblue\",\n  main = \"Histogram with Bell Curve\", xlab = \"Heights (cm)\", ylab = \"Density\"\n)\n# Add bell curve\ncurve(dnorm(x, mean = mean(heights), sd = sd(heights)), col = \"red\", lwd = 2, add = TRUE)\n\n\n\n\n\n\n\n\n\n\nGood job! 👏👏 You’ve taken your first big steps into R, and you’re off to a great start, keep it up!"
  },
  {
    "objectID": "ioc_r/week01/r_w01_exos.html",
    "href": "ioc_r/week01/r_w01_exos.html",
    "title": "Week 1 - Hands-On Examples",
    "section": "",
    "text": "Create a new project in your folder.\n\nSome rules for naming your project:\n\nbe descriptive and keep it short\nuse snake case (only lowercase letters and underscores allowed), avoid special characters (such as !, #, ) and spaces\nthe name cannot starts with numbers\n\n\nOpen your R project, create three new folders, i.e., data, scripts, outputs."
  },
  {
    "objectID": "ioc_r/week01/r_w01_exos.html#create-an-r-project",
    "href": "ioc_r/week01/r_w01_exos.html#create-an-r-project",
    "title": "Week 1 - Hands-On Examples",
    "section": "",
    "text": "Create a new project in your folder.\n\nSome rules for naming your project:\n\nbe descriptive and keep it short\nuse snake case (only lowercase letters and underscores allowed), avoid special characters (such as !, #, ) and spaces\nthe name cannot starts with numbers\n\n\nOpen your R project, create three new folders, i.e., data, scripts, outputs."
  },
  {
    "objectID": "ioc_r/week01/r_w01_exos.html#import-dataset",
    "href": "ioc_r/week01/r_w01_exos.html#import-dataset",
    "title": "Week 1 - Hands-On Examples",
    "section": "Import Dataset",
    "text": "Import Dataset\n\nData Description\nWe’ll be working with a gene expression dataset as an example, sourced from this link.\nThe specific file we’ll use is named “read-counts.csv”, which you can download from this zipped folder.\nThe data comes from an experiment using PCR to study 44 genes. The results were measured to see which genes are active at different stages in Yeast cell cycling. Several strains were tested, including wildtype and some with specific genes knock-downs. Samples were taken at nine time points over two cell cycles (two hours).\n\n\nImporting into Rstudio\n\nDownload the zipped file to your computer and extract its contents.\nIf you are using the RStudio server, upload the read-counts.csv to the folder data of your R project.\nClick on the file to “View” it and identify the column separator.\nImport the file into R and call the imported data “counts”."
  },
  {
    "objectID": "ioc_r/week01/r_w01_exos.html#play-with-basic-r-commands",
    "href": "ioc_r/week01/r_w01_exos.html#play-with-basic-r-commands",
    "title": "Week 1 - Hands-On Examples",
    "section": "Play with Basic R Commands",
    "text": "Play with Basic R Commands\nOpen an R script to write down your code. (In RStudio menu bar, click File -&gt; New File -&gt; R Script)\n\nWhat is the absolute file path of the count data? What is its absolute path? Verify your answer using the function file.exists().\n\n\nfile.exists(\"relative_path/to/your/file\") # replace the path by the yours\nfile.exists(\"absolute_path/to/your/file\") # replace the path by the yours\n\n\nCheck the “Environment” panel or use the function dim(). What is the dimension of the data frame?\n\n\ndim(counts)\n\n[1] 45 41\n\n\nIn the “Environment” panel, click on the tabular icon next to the dataset to visualize the it.\nWe can extract all gene expressions for the sample named “WT:2” using counts[[\"WT:2\"]].\n\nTry mode() on the expression data for “WT:2”, what does it return?\n\n\nmode(counts[[\"WT:2\"]])\n\n[1] \"numeric\"\n\n\n\nCalculate the average expression (mean()) and standard deviation (sd()) of genes from the sample “WT:2”.\n\n\nmean(counts[[\"WT:2\"]])\n\n[1] 148\n\nsd(counts[[\"WT:2\"]])\n\n[1] 392.7854\n\n\n\nGenerate descriptive statistics for all genes from the sample “WT:2” using summary().\n\n\nsummary(counts[[\"WT:2\"]])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      0       6      27     148     110    2527 \n\n\n\n\n\n\n\n\nStats Time!\n\n\n\nWhat are quartiles?\nQuartiles are three values that split sorted data into four equal parts.\n\n(figure modified from this source)\nIQR (Interquartile range) = Q3 - Q1\n\n\n\nGenerate a histogram for the “WT:2” sample using hist(). What does the distribution look like?\n\n\n\n\n\n\n\nStats Time!\n\n\n\nHistograms help us see how data is spread out. They show how many data points fall into different ranges, or bins. By looking at a histogram, we can quickly understand the shape of the data, like if it’s skewed or has outliers. It’s a simple way to get an overview of your data.\n\n\n\nhist(counts[[\"WT:2\"]])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStats Time!\n\n\n\nlog2 Transformation\nA log2 transformation compresses larger values more than smaller ones, making the data less skewed. Many biological data, like gene expression counts, tend to have a highly skewed distribution with a long tail of large values. The log2 transformation makes the distribution more symmetric and closer to normal, which is often desirable for statistical analysis\n\n\n\nplot(\n  x = counts[[\"WT:2\"]], y = log2(counts[[\"WT:2\"]]),\n  xlab = \"Original Scale\", ylab = \"log2 Scale\",\n  main = \"Gene expression for the sample WT:2\"\n)\n\n\n\n\n\n\n\n\nRe draw the histogram with the log2 transformed data, what does the distribution look like now?\n\nhist(log2(counts[[\"WT:2\"]]))"
  },
  {
    "objectID": "ioc_r/week01/r_w01_exos.html#get-your-first-quarto-report",
    "href": "ioc_r/week01/r_w01_exos.html#get-your-first-quarto-report",
    "title": "Week 1 - Hands-On Examples",
    "section": "Get Your First Quarto Report",
    "text": "Get Your First Quarto Report\nCreate a new Quarto document (File -&gt; New File -&gt; Quarto Document), write all codes above and your observation for the questions in the document. Then click the “Render” to generate your own report!\n\nChange something in your script Quarto and re-render it, is the report up-to-date?\n\nTo go further:\n\nWhere is your report stored?\nWhat should you do if you want the report be stored in a specified folder? =&gt; use a configuration file for Quarto.\n\nOpen a new text file and copy paste following code, save it as _quarto.yml in your project folder.\nproject:\n  output-dir: outputs/\nTry “Render” again, now where is your report?\n\n\nGood job! 👏👏 You’ve taken your first big steps into R, and you’re off to a great start, keep it up!"
  },
  {
    "objectID": "ioc_r_info.html",
    "href": "ioc_r_info.html",
    "title": "IOC R Training Information",
    "section": "",
    "text": "Welcome to the IOC R Training! This page contains all the essential details for the training. Please bookmark this page for quick access."
  },
  {
    "objectID": "ioc_r_info.html#calendar",
    "href": "ioc_r_info.html#calendar",
    "title": "IOC R Training Information",
    "section": "Calendar",
    "text": "Calendar\n\nFrench Group\n\nStarts from: Wednesday, 8th January 2025\n\nTime slots: Wednesdays 9:30 am – 12:00 pm\nLocation: Online (Zoom link will be shared prior to the session by email)\nProvisional Schedule:\n\n\n\n\n\n\n\n\n\nWeek\nSession\nDate\nTime\n\n\n\n\nWeek 1\nKickstart with R: Your Gateway to Data Science\n8th January\n9:30 am – 12:00 pm\n\n\nWeek 2\nData Foundations: Vectors and Matrices\n15th January\n9:30 am – 12:00 pm\n\n\nWeek 3\nMore Complex Data Structures: Data Frames and Lists\n22nd January\n9:30 am – 12:00 pm\n\n\nWeek 4\nBuilding Logic: Operators, Conditions, and Functions\n29th January\n9:30 am – 12:00 pm\n\n\nWeek 5\nGraphing with {ggplot2}\n5th February\n9:30 am – 12:00 pm\n\n\nWeek 6\nR-fresh: Revisiting the Essentials\n12th February\n9:30 am – 12:00 pm\n\n\nWeek 7\nSmart Shortcuts: Mastering the apply Family\n5th March\n9:30 am – 12:00 pm\n\n\nWeek 8\nTidy Your Data: Exploring {tidyr} and {dplyr}\n12th March\n9:30 am – 12:00 pm\n\n\nWeek 9\nString Tricks & Final Review\n19nd March\n9:30 am – 12:00 pm\n\n\nWeek 10\nYour project presentation\nTBD\nTBD\n\n\n\n\n\n\nEnglish Group\n\nStarts from: Monday, 13th January 2025\n\nTime slots: Mondays 9:30 am – 12:00 pm\n\nLocation: Online (Zoom link will be shared prior to the session by email)\nProvisional Schedule:\n\n\n\n\n\n\n\n\n\nWeek\nSession\nDate\nTime\n\n\n\n\nWeek 1\nKickstart with R: Your Gateway to Data Science\n13th January\n9:30 am – 12:00 pm\n\n\nWeek 2\nData Foundations: Vectors and Matrices\n20th January\n9:30 am – 12:00 pm\n\n\nWeek 3\nMore Complex Data Structures: Data Frames and Lists\n27th January\n9:30 am – 12:00 pm\n\n\nWeek 4\nBuilding Logic: Operators, Conditions, and Functions\n3rd February\n9:30 am – 12:00 pm\n\n\nWeek 5\nGraphing with {ggplot2}\n10th February\n9:30 am – 12:00 pm\n\n\nWeek 6\nR-fresh: Revisiting the Essentials\n3rd March\n9:30 am – 12:00 pm\n\n\nWeek 7\nSmart Shortcuts: Mastering the apply Family\n10th March\n9:30 am – 12:00 pm\n\n\nWeek 8\nTidy Your Data: Exploring {tidyr} and {dplyr}\n17th March\n9:30 am – 12:00 pm\n\n\nWeek 9\nString Tricks & Final Review\n24nd March\n9:30 am – 12:00 pm\n\n\nWeek 10\nYour project presentation\nTBD\nTBD"
  },
  {
    "objectID": "ioc_r_info.html#recommended-readings",
    "href": "ioc_r_info.html#recommended-readings",
    "title": "IOC R Training Information",
    "section": "Recommended Readings",
    "text": "Recommended Readings\n\nR for Data Science by Hadley Wickham\nHands-On Programming with R by Garrett Grolemund\nggplot2: Elegant Graphics for Data Analysis by Hadley Wickham\nYaRrr! The Pirate’s Guide to R by Nathaniel D. Phillips\nCRAN R Documentation"
  },
  {
    "objectID": "ioc_r_toc.html",
    "href": "ioc_r_toc.html",
    "title": "Materials for the IOC-R",
    "section": "",
    "text": "Week 3 - Hands-On Examples\n\n\n\n\n\n\nweek03\n\n\nexercise\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMore Complex Data Structures:Data Frames and Lists\n\n\nIOC-R Week 3\n\n\n\nweek03\n\n\nslides\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 3 - Homework\n\n\n\n\n\n\nweek03\n\n\nhomework\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 2 - Homework\n\n\n\n\n\n\nweek02\n\n\nhomework\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Foundations:Vectors and Matrices\n\n\nIOC-R Week 2\n\n\n\nweek02\n\n\nslides\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 2 - Hands-On Examples\n\n\n\n\n\n\nweek02\n\n\nexercise\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKickstart with R:Your Gateway to Data Science\n\n\nIOC-R Week 1\n\n\n\nweek01\n\n\nslides\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 1 - Hands-On Examples\n\n\n\n\n\n\nweek01\n\n\nexercise\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 1 - Homework\n\n\n\n\n\n\nweek01\n\n\nhomework\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "ioc_scrnaseq_info.html",
    "href": "ioc_scrnaseq_info.html",
    "title": "IOC Single-cell RNAseq Training Information",
    "section": "",
    "text": "Welcome to the IOC-scRNAseq Training!\nThe online course will be started from end March 2025. More details will be shared later."
  }
]