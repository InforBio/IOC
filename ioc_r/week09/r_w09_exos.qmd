---
title: "Week 9 - Hands-On Examples"
format: 
  html: default
  # pdf: default
date: "2025-03-18"
date-format: " "
categories: 
  - week09
  - exercise
editor_options: 
  chunk_output_type: console
---

The R script is available here:
[link](https://raw.githubusercontent.com/InforBio/IOC/refs/heads/main/ioc_r/week09/r_w09_exos.R)

## Goals

- Know how to process strings in the data
- Get familiar with the main tidyverse packege for data manipulation and visualisation.

## Mini Data Project

1. Import the following data using the file link with appropriate functions:

- The annotation of yeast's genes:
`https://inforbio.github.io/IOC/ioc_r/exos_data/mart_export.txt.gz`, name the data as `annot`.
- The gene differential expression analysis (SET1 *vs.* WT):
`https://inforbio.github.io/IOC/ioc_r/exos_data/toy_DEanalysis.csv`, name the data as `de_res`.

What are the data dimension?
```{r}
library(tidyverse)
# annot <- read_csv("https://inforbio.github.io/IOC/ioc_r/exos_data/mart_export.txt.gz")
annot <- read_csv("../exos_data/mart_export.txt.gz")
de_res <- read_csv("https://inforbio.github.io/IOC/ioc_r/exos_data/toy_DEanalysis.csv")
```

2. In the annotation data, which chromosome has the most genes?
Which chromosome has the least genes?

```{r}
annot |>
  count(`Chromosome/scaffold name`) |>
  arrange(n)

annot |>
  count(`Chromosome/scaffold name`) |>
  arrange(n) |>
  slice(1, n()) # extract the 1st and the last rows

```

3. Among the mitochondrial genes, which genes have a gene description containing the word `ATP6` or `ATP8`?
Select the columns `Gene name` and `Gene description` to show the results.

```{r}
annot |>
  filter(`Chromosome/scaffold name` == "Mito") |>
  filter(str_detect(`Gene description`, "ATP synthase")) |>
  select(`Gene name`, `Gene description`)

# or combine the two conditions in filter,
# select by matching column names
annot |>
  filter(
    `Chromosome/scaffold name` == "Mito" &
      str_detect(`Gene description`, "ATP synthase")
    ) |>
  select(contains(c("gene name", "descri")))
```

4. Compare genes in `de_res` and genes in `annot`. Are all genes from `de_res` exist in `annot`? How many genes do not have annotation information?

```{r}
table(de_res$gene_name %in% annot[["Gene name"]])
```


5. Add the annotation information for the genes in `de_res`, you can use either:
- the `merge()` function from the base package,
- or the `left_join()` function from the dplyr package. (`?left_join`)

```{r}
de_res_annot <- merge(
  x = de_res, y = annot,
  by.x = "gene_name", by.y = "Gene name",
  all.x = TRUE
) # the output is no longer a tibble but data frame
de_res_annot <- as_tibble(de_res_annot) # convert to a tibble

# or with left_join
de_res_annot <- de_res |>
  left_join(annot, by = c("gene_name" = "Gene name"))
```
---

6. Draw a volcano plot to show the differential expression analysis results:

- Put log2 fold change on x-axis
- Put -log10(p-value) on y-axis
- Color the points if the gene description contains the word "Histone" or "histone". (You need to create a new column which indicates whether the gene description contains the key word for the color in ggplot2.)
- Add gene name for the genes having absolute log2 fold change is bigger than 1.5 (`?geom_text`)
- Show the gene name as plot title, the gene description as subtitle

```{r}
de_res_annot |>
  mutate(
    histone_related = str_detect(
      `Gene description`, pattern = "histone|Histone"
    )
  ) |>
  ggplot(aes(x = log2FoldChange, y = -log10(pvalue))) +
  geom_point(aes(color = histone_related), alpha = 0.7) +
  geom_text(
    data = filter(de_res_annot, abs(log2FoldChange) > 1.5),
    aes(label = gene_name), # use gene name as lable
    vjust = -0.5 # adjust vertical position of text
  ) +
  theme_light()
```

Until now, we have studied the gene expression between two groups (SET1 *vs.* WT). How about if we want to compare the 4 groups (WT, SET1, SET1.RRP6 and RRP6)? For example to check if the average expression value of a gene is the same among the 4 groups?

:::{.callout-tip title="Stats Time!"}
**One-way ANOVA**

With ANOVA (ANalysis Of VAriance), we can determine if the average is the same among all groups based on the observation.

To compare the average between more than two groups, we can compare the variance.
We can suppose that the the variance within each group is the same across all groups.

![](images/anova_img.png){width=80%}

(Figure credit: Lorette Noiret)

- $H_0: \mu_1 = \mu_2 = ... = \mu_n$
- $H_1$: there is at least one group which has an average different than other groups.

Which is equals to test:

- $H_0: \sigma_{\text{inter group}} = \sigma_{\text{intra group}}$
- $H_1: \sigma_{\text{inter group}} > \sigma_{\text{intra group}}$

Conditions of application:

- Samples should be independent
- Data is normally distributed (Shapiro test)
- The variance is the same in all populations (homogeneity of variance, Levene's test or Bartlett's test)

The R function `aov()` helps us to perform an ANOVA.
::: 

Let's take the experssion of gene *LOH1* as example.

7. Import the expression data using this link:
`https://inforbio.github.io/IOC/ioc_r/exos_data/read-counts.csv`

```{r}
counts <- read_csv("https://inforbio.github.io/IOC/ioc_r/exos_data/read-counts.csv")
```


8. Build a data frame or a tibble with two columns:

- "group": sample groups
- "value": expression values

Check how to use the function `str_replace()`.

```{r}
?str_replace

anova_data <- counts |>
  filter(Feature == "LOH1") |>
  pivot_longer(cols = -1, names_to = "sample_id", values_to = "value") |>
  mutate(
    group = str_replace(sample_id, pattern = "\\.([0-9]+)$", replace = "")
  )
anova_data
```

Perform ANOVA and use `summary` to get the results.

```{r}
res_aov <- aov(value ~ group, data = anova_data)
summary(res_aov)
```

9. Perform a `TukeyHSD()` (Tukey Honest Significant Differences) test on the ANOVA results to check the pair-wise difference. (`?TukeyHSD`)

```{r}
TukeyHSD(res_aov)
```

10. Visualise the expression level of *LOH1* of the 4 groups with a boxplot.

```{r}
ggplot(
  anova_data,
  aes(
    x = factor(group, levels = c("WT", "SET1", "SET1.RRP6", "RRP6")),
    y = value
  )
) +
  geom_boxplot() +
  geom_point(
    aes(color = group),
    position = position_jitter(height = 0, width = 0.3, seed = 1)
  ) +
  labs(x = NULL, title = "Expression of LOH1") +
  theme_light() +
  theme(legend.position = "none")
```


---

#### Great work, youâ€™ve made it to the end! ðŸŽ‰ and now you're ready to take on even more! Keep exploring new things, there's so much more R can do for you!
