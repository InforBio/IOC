---
title: "Data Foundations:<br>Vectors and Matrices"
subtitle: "IOC-R Week2"
format:
  revealjs: 
    toc: true
    toc-title: "Overview"
    toc-depth: 1
    slide-number: true
    preview-links: auto
    logo: /../../images/logoInforBio_fond_blanc_small.png
    css: /../custom.css
echo: true
categories: 
  - week02
  - slides
---

# Data Types in R

## Data Types {.smaller}

Examples: `1`, `2.5`, `A`, `InforBio`, `I love R`, `TRUE`, `FALSE`

What are their data type in the daily life?

. . .

And in R?

- Numeric: `1`, `2.5`
- Integer: `1`
- Character: `"A"`, `"InforBio"`, `"I love R"`
- Logical: `TRUE`, `FALSE`
- Factor: for categorical data

## Where Do We Store Data?  {.smaller}

- A **variable** is like a box where you store data.
- Each variable has a **name** and **content** (one or multiple values).
- A variable is created at the moment you assign a value to it. Use `<-` for assignment.

```{r}
x <- 1 # put a space on each side of the assignment sign
x # type variable name to print its value(s)

char_name <- "InforBio"
char_name

passed <- TRUE
passed
```

Check the "Environment" pane or type `ls()` in the console, are variables you just created there?

::: {.notes}
Variables are containers for data.
A box labeled "x" containing the number 1.
A box labeled "char_name" containing the platform name "InforBio".
:::

## Variable Naming Convention {.smaller}

::: columns
::: {.column}
- Be descriptive and keep it short
- Use snake case (only `[a-z]` and `_`)
- Avoid special characters (such as `!`, `#`, ) and spaces
- Do not start a name with numbers
- Avoid reserved keywords in R (*e.g.*, function, if, TRUE)
- Do not overwrite built-in functions (*e.g.*, mean, sd)
:::

::: {.column .fragment}

Which are validated names?

``` {.r code-line-numbers="1-16|5,9-11"}
foo
test
var
var2
exam_results
a_variable_with_a_name_super_long
count.matrix 

day_1
day_one
day1
first_day_of_the_month
DayOne
dayOne
DAYONE
DAYone
```

:::
:::

::: {.content-smaller .fragment}
How to know if a variable name was already used?

- Type `help(reserved)` to check reserved words in R.
- Check in "Environment" pane.
- Type the first letter of a name and press the **Tab** key to trigger autocompletion
:::

::: {.notes}
Follow the same rules when you naming your R project folder.
If really needs a long name, use abbreviation of it with a comment line at the begin to explain what it stands for.
:::

## Numeric, Integer, Double  {.smaller}

```{r}
my_var <- 10
my_var
class(my_var)
is.numeric(my_var)
```

. . .

```{r}
class(10L) # "L" declares it's an integer
typeof(10L)
```

. . .

```{r}
class(1.5)
typeof(1.5)
```

## Character {.smaller}

R stores text (strings) as character. Use quotation marks ("" or '') to indicate a value is character.

```{r}
# create a vector of characters
x <- c("I", "love", "R")
x

class(x)
is.character(x)
```

. . .

```{r}
#| error: true

x <- "1"
y <- "2"
x + y
```

. . .

```{r}
as.numeric(x) + as.numeric(y)  # convert to numeric
```

. . .

```{r}
as.character(1) # convert back to character
```

## Logical (1) {.smaller}

- Only two possible values for logical data: `TRUE` or `FALSE`.

- Can be written as `T` or `F`, but never in other formats (*e.g.*: `True`, `true`, *etc.*)

```{r}
#| error: true

is.logical(TRUE)
is.logical(T)
is.logical(True)
```

- Can be obtained from logical statements, *e.g.*:

```{r}
2 > 1
```

## Logical (2) {.smaller}

- Convert to other types:

```{r}
as.numeric(TRUE)
as.numeric(FALSE)

vec_logical <- c(TRUE, TRUE, FALSE)
sum(vec_logical)

```

. . .

```{r}
as.character(TRUE)
as.character(FALSE)
```

. . .

```{r}
as.logical(1)
as.logical(-1)
as.logical(0)
```

## Factor {.smaller}

Specify this data type when you want R treats your data as categorical data.

```{r}
grades <- c("one", "two", "one", "three", "two")
grades

factor(grades)
as.factor(grades)
```

. . .

Specify the levels:

```{r}
as.factor(grades)

grades_fac <- factor(grades, levels = c("one", "two", "three")) # specify the right level
grades_fac
```

. . .

Convert to numeric values:

```{r}
as.numeric(grades_fac)
```


# Data Strucutres

## From Single Value to Multiple Values

When we store multiple values, we need a structure.

```{r}
gene1 <- 10
gene2 <- 12
gene3 <- 9
```

How to put `gene1`, `gene2` and `gene3` together?

. . .

R provides 4 data structures to store multiple values:

- Same data type: vectors, matrices
- Different data types: lists, data frames (Next session)

# Vectors

The Simplest Data Structure in R, for one dimension data of the same type.

## Vector Creation {.smaller}

Use the function `c()` to create a vector.

```{r}
ages <- c(25, 30, 35, 40) # Numeric vector
ages

gene_expr <- c(gene1, gene2, gene3)
gene_expr
c(gene_expr, 18)

1:10 # numbers from 1 to 10
```

. . .

```{r}
genes <- c("gene1", "gene2", "gene3") # Character vector
genes

c(TRUE, FALSE, FALSE, TRUE, TRUE) # Logical vector
```

. . .

```{r}
c(10, "gene1")
c(10, TRUE)
```

## Vector Indexing {.smaller}

::: .columns
::: {.column}

- Use `[]` to get access of elements in a vector. 

*Notes*: The index starts from **1**.

```{r}
gene_expr
gene_expr[1]   # First element
gene_expr[2:3] # Elements 2 and 3
gene_expr[-1]  # reverse indexing
```

:::

::: {.column .fragment}

- Modify element(s) in a vector.

```{r}
gene_expr[1] <- 100
gene_expr

gene_expr[2:3] <- 8
gene_expr

gene_expr[2:3] <- c(0, 20)
gene_expr
```

:::
:::

# Matrices

a vector can be either a row or a column

